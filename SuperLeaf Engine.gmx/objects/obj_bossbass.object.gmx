<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bossbass</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_redcheep</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Boss Bass

//Animate
image_speed = 0.2;

//Food
fud = -1;

//Prevent turning
noturn = 0;

//Jump
jumping = 0;

//Call the inherited event
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generate a new boss bass

with (instance_create(x,ystart,obj_enemy_tick)) sprite_index = spr_bossbass;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Starts moving

//If the enemy is not moving.
if (hspeed == 0) {

    //If Mario does exist.
    if (instance_exists(obj_mario)) {
    
        if (obj_mario.x &gt; x)
            hspeed = 2;
        else
            hspeed = -2;
    }
    else
        hspeed = -2;
}

//Set spinproof flag
spinproof = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Boss Bass logic

//Update death sprite
deadspr = sprite_index;

//Update spiked flag.
spiked = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_swim,0,0);

//Cap vertical speed
if (vspeed &gt; 4)
vspeed = 4;

//If Mario does exist and the boss bass has not jumped yet.
if ((instance_exists(obj_mario)) &amp;&amp; (jumping == 0)) {

    //If the boss bass has not jumped.
    if ((obj_mario.x &gt; x-32) &amp;&amp; (obj_mario.x &lt; x+32)) {
    
        //Set the sprite
        sprite_index = spr_bossbass_jump;
    
        //Make it jump
        jumping = 1;
        
        //Set the vertical speed
        vspeed = -4.5;
        gravity = 0.2;
        
        //Set the horizontal speed.
        if (hspeed &gt; 0)
            hspeed = 1;
        else if (hspeed &lt; 0)
            hspeed = -1;
    }
}

//Otherwise, look for a nearest water surface and allow the boss bass to jump.
else {

    //Find water
    water = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_swim,0,0);
    if (water) {
    
        //If the boss bass has jumped out of the water.
        if (jumping == 1) {
        
            //If the boss bass makes contact with water.
            if ((y &gt; water.y+12) &amp;&amp; (vspeed &gt; 0)) {
            
                //Snap to position.
                y = water.y+12;
                
                //Stop vertical speed
                vspeed = 0;
                gravity = 0;
                
                //Makes the boss bass able to jump again...
                event_user(8);
            }
        }
    }
}

//Allow / Disallow turning
if (jumping == 1)
    noturn = 48;
else
    event_user(9);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wraps around if enabled on the level.

if (global.hwrap) { //If room wrapping is enabled on the room.
    
    //If Mario is nearby the right boundary of the room.
    if (x &gt; room_width) {
    
        //Make Mario go to the left boundary of the room.
        x -= room_width;
    }    
    
    //Otherwise, if Mario is nearby the left boundary of the room.
    else if (x &lt; 0) {
    
        //Make Mario go to the right boundary of the room.
        x += room_width;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mario">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Eat Mario

//If Mario is invulnerable
if (instance_exists(obj_invincibility))
exit;

//Deny if Mario is behind the scenery.
if (obj_mario.depth == 16) {

    if (obj_mario.tile12 &gt; -1) || (obj_mario.tile15 &gt; -1)
        exit;
}

//If the boss bass is jumping.
if ((other.bbox_bottom &gt; bbox_top-vspeed+5) &amp;&amp; (vspeed &lt; 0) &amp;&amp; (jumping == 1)) {

    //Eat Mario
    if (fud == -1) {
    
        fud = instance_create(x,room_height+900,obj_mario_eaten);
        with (fud) {
        
            parent = other.id;
        }
        
        //Set the sprite
        sprite_index = spr_bossbass;
        
        //Destroy Mario
        with (other) instance_destroy();
    }
}

//Otherwise, do some fish fries :D
else {

    //If Mario is sliding down a slope.
    if (!other.sliding) {
    
        //If Mario is above and moving down.
        if ((other.bbox_bottom &lt; bbox_top-vspeed+5) &amp;&amp; (other.vspeed &gt;= 0)) {
    
            //If Mario is wearing a kuribo shoe.
            if (global.kuriboshoe) {
            
                //Play a stomp sound
                audio_play_sound(snd_stomp,0,0);
                
                //Execute combo script.
                musical_scale(other.id,id,0);
                
                //Kill enemy
                event_user(6);
                
                //Make Mario jump
                with (other) event_user(1);            
                                    
                //Create hit effect.
                ID = instance_create(other.x,other.bbox_bottom-8,obj_smoke);
                with (ID) {
                
                    sprite_index = spr_spinthump;
                }    
            }
            
            //Otherwise, use default event.
            else {
            
                //If the enemy is not spiked.
                if (!spiked) {
            
                    //Play a stomp sound
                    audio_play_sound(snd_stomp,0,0);
                    
                    //Execute combo script.
                    musical_scale(other.id,id,0);
                
                    //Default stomp event.
                    event_user(5);
                    
                    //Make Mario jump
                    with (other) event_user(1);            
                                        
                    //Create hit effect.
                    ID = instance_create(other.x,other.bbox_bottom-8,obj_smoke);
                    with (ID) {
                    
                        sprite_index = spr_spinthump;
                    }
                }
                
                //Otherwise, if the enemy is spiked.
                else {
                
                    //Hurt Mario
                    with (other) event_user(0);                
                }
            }
        }
        else {
        
            //Hurt Mario
            with (other) event_user(0);
        }
    }
    
    //Otherwise, if Mario is sliding down a slope.
    else {
    
        //If the enemy is not spiked.
        if (!spiked) {
        
            //Play 'kick' sound
            audio_play_sound(snd_kick,0,0);
        
            //Get 100 points
            with (instance_create(round(bbox_left+bbox_right)/2-8,round(y),obj_score)) event_user(0);
            
            //Kill enemy
            event_user(4);
            
            //Create hit effect.
            ID = instance_create(other.x,other.y,obj_smoke);
            with (ID) {
            
                sprite_index = spr_spinthump;
            }
        }
        
        //Otherwise, if the enemy is spiked.
        else {
        
            //Hurt Mario
            with (other) event_user(0);        
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allow the boss bass to turn towards Mario.

//If the boss bass can turn.
if (noturn == 0) {

    //Reset turning
    noturn = 40;
    
    //Follow Mario if it exists.
    if (instance_exists(obj_mario)) {
    
        //If Mario is at the right and it's moving to the left.
        if ((hspeed &lt; 0) &amp;&amp; (obj_mario.x &gt; x)) {
        
            //Set the horizontal speed.
            hspeed = 2;
            
            //Set the facing direction.
            xscale = 1;
        }
        
        //Otherwise, if Mario is at the left and it's moving to the right.
        else if ((hspeed &gt; 0) &amp;&amp; (obj_mario.x &lt; x)) {
        
            //Set the horizontal speed.
            hspeed = -2;
            
            //Set the facing direction.
            xscale = -1;
        }    
    }
    
    //Otherwise, follow the level manager.
    else {
    
        //If the level manager is at the right and it's moving to the left.
        if ((hspeed &lt; 0) &amp;&amp; (obj_levelmanager.x &gt; x)) {
        
            //Set the horizontal speed.
            hspeed = 2;
            
            //Set the facing direction.
            xscale = 1;
        }
        
        //Otherwise, if the level manager is at the left and it's moving to the right.
        else if ((hspeed &gt; 0) &amp;&amp; (obj_levelmanager.x &lt; x)) {
        
            //Set the horizontal speed.
            hspeed = -2;
            
            //Set the facing direction.
            xscale = -1;
        }     
    }
}

//Otherwise, decrement turning variable.
else {

    noturn--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allow the boss bass to jump again.

//Set the sprite
if (fud == -1) {

    sprite_index = spr_bossbass;
}

//Disallow jumping
jumping = 2;

//Allow jumping.
alarm[0] = 48;

//Cap horizontal speed.
if (hspeed &gt; 0)
    hspeed = 2;
else if (hspeed &lt; 0)
    hspeed = -2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
