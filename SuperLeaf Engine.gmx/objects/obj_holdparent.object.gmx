<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_brick_blue_th</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_physicsparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The parent of all holdable items.

//Is the item being held?
held = false;

//Facing direction
xscale = 1;

//Call the rest of variables
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario not hold anything

if (held) {

    with (obj_mario) holding = 0;
    with (obj_mario_warp) holding = 0;
    with (obj_mario_jump) holding = 0;    
    with (obj_mario_door) holding = 0;
    with (obj_mario_note) holding = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If the item is being held.

if (held) {

    if (instance_exists(obj_mario)) {
    
        //Set the y position.
        y = obj_mario.y-2;
        
        //Set the x position.
        if (obj_mario.turning) {
        
            //Set the depth
            depth = -6;            
            
            //Stay on the same x position.
            x = obj_mario.x;
        }
        else {
        
            //Set the depth
            depth = -4;
        
            //Stay 10 pixels near depending of Mario's facing direction.
            x = obj_mario.x+10*obj_mario.xscale;
        }
            
        //If the 'control' key is still being held.
        if (keyboard_check(vk_control)) {
        
            //Make sure Mario is holding the item
            obj_mario.holding = 1;
            
            //Use the same facing direction
            xscale = obj_mario.xscale;
        }
        
        else if (!obj_mario.disablecontrol) {
        
            //Play kick sound.
            audio_play_sound(snd_kick,0,0);
            
            //Make Mario kick the item.
            with (obj_mario) {
            
                event_user(7);
            }
            
            //Stop Mario from holding the item.
            obj_mario.holding = 0;
            
            //Stop being held.
            held = 0;
            
            //Reset depth
            depth = -2;
            
            //Get thrown
            event_user(15);
        }
        
        //Stay visible
        visible = true;
    }
    
    //Otherwise, if Mario is warping through a pipe.
    else if (instance_exists(obj_mario_warp)) {
    
        //Set the position of the item.
        x = obj_mario_warp.x;
        y = obj_mario_warp.y;
        
        //Make it invisible.
        visible = 0;
        
        //Make Mario hold the item
        obj_mario_warp.holding = 1;
        
        //Set up the item's sprite
        obj_mario_warp.myitem = sprite_index;
        
        //Set up the item's frame.
        obj_mario_warp.myframe = image_index;
    }
    
    //Otherwise, if Mario is warping through a door.
    else if (instance_exists(obj_mario_door)) {
    
        //Set the position of the item.
        x = obj_mario_door.x;
        y = obj_mario_door.y;
        
        //Make it invisible.
        visible = 0;
        
        //Make Mario hold the item
        obj_mario_door.holding = 1;
        
        //Set up the item's sprite
        obj_mario_door.myitem = sprite_index;
        
        //Set up the item's frame.
        obj_mario_door.myframe = image_index;
    }
    
    //Otherwise, if Mario is jumping to the sky.
    else if (instance_exists(obj_mario_jump)) {
    
        //Set the position of the item.
        x = obj_mario_jump.x;
        y = obj_mario_jump.y;
        
        //Make it invisible.
        visible = 0;
        
        //Make Mario hold the item
        obj_mario_jump.holding = 1;
        
        //Set up the item's sprite
        obj_mario_jump.myitem = sprite_index;
        
        //Set up the item's frame.
        obj_mario_jump.myframe = image_index;
    }
    
    //Otherwise, if Mario is jumping to the sky.
    else if (instance_exists(obj_mario_note)) {
    
        //Set the position of the item.
        x = obj_mario_note.x;
        y = obj_mario_note.y;
        
        //Make it invisible.
        visible = 0;
        
        //Make Mario hold the item
        obj_mario_note.holding = 1;
        
        //Set up the item's sprite
        obj_mario_note.myitem = sprite_index;
        
        //Set up the item's frame.
        obj_mario_note.myframe = image_index;
    }
    
    //Otherwise, stop being held.
    else {
    
        //Stop being held.
        held = false;
        
        //Reset depth
        depth = -2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Holdable Item logic

if (!held) {

    //Default Wall collisions.
    event_user(0);
    
    //Default Floor / Ceiling collisions.
    event_user(1);
    
    //Default underwater script.
    var water = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_swim,0,0); //Check for the nearest water object and make the object swim.
    if (!swimming) &amp;&amp; (water) {
        
        //Make the object swim.
        swimming = true;
        
        //Stop vertical movement.
        gravity = 0;
        if (vspeed &gt; 0)
            vspeed = 0;
    }
    else if (swimming) &amp;&amp; (!water) { //If the object is swimming and there's no water above.
    
        //Make the object not swim.
        swimming = false;
    }
    
    //Slowdown in contact with the ground.
    if (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_solidtop,0,0))
    || (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_slopeparent,1,0)) {
    
        //Reduce the item speed until it stops.
        hspeed = max(0,abs(hspeed)-0.075)*sign(hspeed);
        
        //Set up horizontal speed to 0 when hspeed hits 0.075.
        if ((hspeed &lt; 0.075) &amp;&amp; (hspeed &gt; -0.075)) {
        
            hspeed = 0;
        }        
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Conveyor belt collision.

if (vspeed == 0) {

    //Left conveyor belt collision
    lconv = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_conveyor_l,0,0); 
    if ((lconv) &amp;&amp; (lconv.image_speed != 0)) {
    
        //If there's not a solid on the way.
        if (!collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0)) {
        
            //If the horizontal speed is lower than 0.
            if (hspeed &lt; 0) {
            
                x += hspeed*2;
            }
            
            //Otherwise, if the horizontal speed is equal/greater than 0.
            else {
            
                if (hspeed == 0)
                    x--;
                else
                    x -= hspeed/2;
            }
        }
    }
    
    //Right conveyor belt collision
    rconv = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_conveyor_r,0,0);
    if ((rconv) &amp;&amp; (rconv.image_speed != 0)) {
    
        //If there's not a solid on the way.
        if (!collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,1,0)) {
        
            //If the horizontal speed is greater than 0.
            if (hspeed &gt; 0) {
            
                x += hspeed*2;
            }
            
            //Otherwise, if the horizontal speed is equal/greater than 0.
            else {
            
                if (hspeed == 0)
                    x++;
                else
                    x -= hspeed/2;
            }
        }
    }
    
    //Platform collision
    semisolid = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_solidtop_tanks,0,0);
    if (semisolid) 
    &amp;&amp; (vspeed &gt;= 0) 
    &amp;&amp; (bbox_bottom &lt; semisolid.yprevious+5) {
    
        //Snap into position
        y = semisolid.bbox_top-16;
        
        //Snap horizontally
        if (semisolid.x-xprevious &lt; 0) &amp;&amp; (!collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,0,1))
        || (semisolid.x-xprevious &gt; 0) &amp;&amp; (!collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,0,1))
            x += semisolid.x-semisolid.xprevious;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wraps around if enabled on the level.

if (global.hwrap) { //If room wrapping is enabled on the room.
    
    //If Mario is nearby the right boundary of the room.
    if (x &gt; room_width) {
    
        //Make Mario go to the left boundary of the room.
        x -= room_width;
    }    
    
    //Otherwise, if Mario is nearby the left boundary of the room.
    else if (x &lt; 0) {
    
        //Make Mario go to the right boundary of the room.
        x += room_width;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_blockparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get bumped

if (other.vspeed &lt; 0) {

    //Set the vertical speed.
    if (!swimming)
        vspeed = -3;
    else
        vspeed = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mario">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario hold or interact with the item.

//Deny if Mario is behind the scenery.
if (obj_mario.depth == 16)
exit;

if ((!held) &amp;&amp; (obj_mario.delay == 0)) { //If the item is not being held.

    //If Mario is above and moving down, use the stomp event.
    if ((other.bbox_bottom &lt; bbox_top-vspeed+5) &amp;&amp; (other.vspeed &gt; 0)) {
    
        //Execute stomp event.
        event_user(2);
    }
    
    //Otherwise, if Mario can hold the item.
    else if (scr_can_hold()) {
    
        //Make Mario hold it.
        other.holding = 1;
        
        //Get held
        held = 1;
        
        //Change the depth
        depth = -4;
        
        //Disable speed / gravity
        speed = 0;
        gravity = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default throw / kick event.

//Set the horizontal speed.
hspeed = obj_mario.hspeed+1.5*obj_mario.xscale;

//Move up when solids are not in the way.
if (!place_meeting(x,y,obj_solid)) {

    vspeed = -2;
}
else {

    vspeed = 0;
}

//Slope bug fix
while (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_slopeparent,1,0))
    y--;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remember the item held for the next room.

if (held) {

    //Remember the object.
    global.carrieditem = object_index;
    
    //Remember the sprite of the object.
    global.carriedsprite = sprite_index;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
