<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mapmario</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_square</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///It's a me, Mario. (On the map, obviously.)

/*
**  This item uses creation code!
**
**  mapmusic = The map music (Any sound resource you load in, check up obj_persistent Game Start event for a list of songs that you can use.)
**  mapspeed = The global animation speed for all objects.
*/

//Default values
mapmusic = 0;
mapspeed = 0.075;

//If Mario has been on the world map before.
if (ds_map_exists(global.worldmap,"returnx")) {

    x = ds_map_find_value(global.worldmap,"mapx");
    y = ds_map_find_value(global.worldmap,"mapy");
}

//Otherwise, if it's the first time.
else {

    ds_map_add(global.worldmap,"returnx",x);
    ds_map_add(global.worldmap,"returny",y);
}

//Load the return variables
returnx = ds_map_find_value(global.worldmap,"returnx");
returny = ds_map_find_value(global.worldmap,"returny");

//Animate
image_speed = 0.1;

//Recreate the card minigame panel if it was there previously
if (ds_map_exists(global.worldmap,"cardgame")) {

    instance_create(ds_map_find_value(global.worldmap,"cardgamex"),ds_map_find_value(global.worldmap,"cardgamey"),obj_mapcard)
}

//Mario's current state
ready = 0;

//Handle stream
stream = -1;

//Is Mario flashing.
isflashing = 0;

//Is the inventory open
inventory = false;

//What inventory object is selected
boxselection = 1;

//Set the palette sprite.
pal_sprite = spr_palette;
current_pal = 0;

//Initialize flashing effects
alarm[6] = 1;

//If Mario died on a level, return him to the previous location.
if ((global.died) &amp;&amp; (global.clear == 0)) {

    //Move towards point
    move_towards_point(returnx,returny,2);
    
    //Play the spin sound
    alarm[5] = 1;
    
    //Set the state
    ready = 2;
}

//If Mario cleared the level.
else if (global.clear == 1) {

    //Clear up the level
    alarm[2] = 30;
    
    //Set the state
    ready = 1;
}

//Play music if none of the above actions occured
else {

    alarm[3] = 1;
    if (global.mapstart == 0) {
    
        //Initialize 
        global.mapstart = 1;
        
        //Make invisible
        image_alpha = 0;
        
        //Create teleport effect
        alarm[7] = 150;   
    }
}

//Reset global variables
global.time = 0;
global.died = 0;
global.pswitch = 0;
global.starman = 0;
global.mariostart = 0;
global.carrieditem = noone;
global.carriedsprite = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create teleport effect

//Play teleport sound
audio_play_sound(snd_teleport,0,0);

//Do not show center box.
global.mapstart = 2;

//Create teleport
instance_create(xstart+8,ystart+8,obj_teleport);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Mario's flashing effect.

//Make Mario flash if he's under the effects of the starman.
if (global.mapstar) {

    //Make Mario flash.
    isflashing = (isflashing mod 4)+1;
    
    //Repeat the process.
    alarm[6] = 4;
}
else {

    isflashing = 0;
    alarm[6] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario's sound as he skids towards his previous location.

audio_play_sound(snd_spin,1,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop the music.

FMODInstanceStop(stream);
stream = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Loop the music.

if (!FMODInstanceIsPlaying(stream)) {

    stream = FMODSoundLoop(mapmusic,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario's victorious cleared level script!

//Find the id of the panel Mario is on
panel = collision_point(x+8,y+8,obj_worldparent,0,0)

//If there is a panel there (Why wouldn't there be?)
if (panel) {

    //Call the panel's clear script if the level is beaten normally
    if (global.clear == 1) {
    
        with (panel) {
        
            event_user(2);
        }
    }
}

//What should happen after the clear animation is done
alarm[1] = 60
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///For after the level clear or death skid animations

//Reset the state
ready = 0

//Set the new return values
returnx = x;
returny = y;

//Save Mario's current location
ds_map_replace(global.worldmap,"mapx",x);
ds_map_replace(global.worldmap,"mapy",y);

//Save the return variables
ds_map_replace(global.worldmap,"returnx",returnx);
ds_map_replace(global.worldmap,"returny",returny);

//Reset the clear global variable
global.clear = 0;

//Play the music
alarm[3] = 1;

//Check if there's N-Spade panels active.
if (instance_exists(obj_mapcard)) {

    with (obj_mapcard) {
    
        hspeed = 0.25;
        alarm[0] = 32;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Open up panel directions and stop Mario from moving

//Get the id of the panel he is on
panel = collision_point(x+8,y+8,obj_panelparent,0,0);

//If he is on a panel
if (panel) {

    //Open the panel's up direction if he is moving up
    if (direction = 90) {
    
        panel.open[0] = 1;
    }
    
    //Open the panel's down direction if he is moving down
    else if (direction = 270) {
    
        panel.open[1] = 1;
    }

    //Open the panel's left direction if he is moving left
    else if (direction = 180) {
    
        panel.open[2] = 1;
    }

    //Open the panel's right direction if he is moving right
    else if (direction = 0) {
    
        panel.open[3] = 1;
    }
}

//Stop moving
speed = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update the palette sprite and set the appropiate sprite for Mario.

current_pal = wrap(isflashing,0,pal_swap_get_pal_count(pal_sprite)-1);

//If Mario is using the jugemu cloud item.
if (global.mapcloud == true) {

    pal_sprite = spr_palette_cloud;
    sprite_index = spr_mapmario_event_cloud;
}

//Otherwise, set up the default sprites.
else {

    //If Mario has the small, big or raccoon powerups.
    if ((global.powerup == cs_small) || (global.powerup == cs_big) || (global.powerup == cs_raccoon)) {
    
        pal_sprite = spr_palette;
        switch (global.powerup) {
        
            //Small
            case (cs_small): {
            
                sprite_index = spr_mapmario;
            } break;
            
            //Big 
            case (cs_big): {
            
                sprite_index = spr_mapmario_big;
            } break;
            
            //Raccoon
            case (cs_raccoon): {
            
                if (!global.mappwing)
                    sprite_index = spr_mapmario_raccoon;
                else
                    sprite_index = spr_mapmario_raccoon_p;
            } break;
        }
    }
    
    //Otherwise, if Mario has the fire powerup.
    else if (global.powerup == cs_fire) {
    
        pal_sprite = spr_palette_fire;
        sprite_index = spr_mapmario_fire;
    }
    
    //Otherwise, if Mario has the fire powerup.
    else if (global.powerup == cs_frog) {
    
        pal_sprite = spr_palette_frog;
        sprite_index = spr_mapmario_frog;
    }
    
    //Otherwise, if Mario has the fire powerup.
    else if (global.powerup == cs_tanooki) {
    
        pal_sprite = spr_palette_tanooki;
        sprite_index = spr_mapmario_tanooki;
    }
    
    //Otherwise, if Mario has the fire powerup.
    else if (global.powerup == cs_hammer) {
    
        pal_sprite = spr_palette_hammer;
        sprite_index = spr_mapmario_hammer;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles Mario's logic in the world map

if (image_alpha != 0) {

    //If Mario is death skidding, and reached his location
    if ((ready == 2) &amp;&amp; (round(x) &gt; returnx-2) &amp;&amp; (round(x) &lt; returnx+2) &amp;&amp; (round(y) &gt; returny-2) &amp;&amp; (round(y) &lt; returny+2)) {

        //Stop the sound
        audio_stop_sound(snd_spin);
    
        //Change to the event state
        ready = 1;
    
        //Stop moving
        speed = 0;
    
        //Make sure his coordinates are exact
        x = returnx;
        y = returny;
    
        //Set the alarm to allow Mario to move
        alarm[1] = 60;
    }
    
    //If Mario is in his normal state
    else if (ready == 0) {
    
        //If he is not moving
        if (speed == 0) {
    
            //Get the id of the panel he is on
            panel = collision_point(x+8,y+8,obj_panelparent,0,0);
    
            //If the up key is pressed
            if (keyboard_check_pressed(vk_up)) {
    
                //If there is no solid in the way
                if (!position_meeting(x+8,y-8,obj_solid)) {
                
                    //If the cloud is not active.
                    if (!global.mapcloud) {
    
                        //If the panel, if it exists, is not beaten or not open in the up direction, play the bump sound
                        if ((panel) &amp;&amp; (!panel.beaten) &amp;&amp; (!panel.open[1]))
                            audio_play_sound(snd_bump,0,0);
        
                        //Otherwise, move up 32 pixels
                        else {
                        
                            audio_play_sound(snd_move,0,0);
                            vspeed = -2;
                            alarm[0] = 16;
                        }
                    }
                    
                    //Otherwise, if it's active.
                    else {
                    
                        if ((panel) &amp;&amp; (!panel.open[1])) {
                        
                            //Discard cloud
                            global.mapcloud = false;
                            
                            //Move
                            audio_play_sound(snd_move,0,0);
                            vspeed = -2;
                            alarm[0] = 16;
                        }
                        else {
                        
                            audio_play_sound(snd_move,0,0);
                            vspeed = -2;
                            alarm[0] = 16;                        
                        }
                    }
                }
    
                //Otherwise, play the bump sound
                else {
                
                    audio_play_sound(snd_bump,0,0);
                }
            }
            
            //If the down key is pressed
            else if (keyboard_check_pressed(vk_down)) {
            
                //If there is no solid in the way
                if (!position_meeting(x+8,y+23,obj_solid)) {
                    
                    //If the cloud is not active.
                    if (!global.mapcloud) {
    
                        //If the panel, if it exists, is not beaten or not open in the down direction, play the bump sound
                        if ((panel) &amp;&amp; (!panel.beaten) &amp;&amp; (!panel.open[0]))
                            audio_play_sound(snd_bump,0,0);
        
                        //Otherwise, move up 32 pixels
                        else {
                        
                            audio_play_sound(snd_move,0,0);
                            vspeed = 2;
                            alarm[0] = 16;
                        }
                    }
                    
                    //Otherwise, if it's active.
                    else {
                    
                        if ((panel) &amp;&amp; (!panel.open[0])) {
                        
                            //Discard cloud
                            global.mapcloud = false;
                            
                            //Move
                            audio_play_sound(snd_move,0,0);
                            vspeed = 2;
                            alarm[0] = 16;
                        }
                        else {
                        
                            audio_play_sound(snd_move,0,0);
                            vspeed = 2;
                            alarm[0] = 16;                        
                        }
                    }
                }
    
                //Otherwise, play the bump sound
                else {
                
                    audio_play_sound(snd_bump,0,0);
                }            
            }
            
            //If the left key is pressed
            else if (keyboard_check_pressed(vk_left)) {
            
                //If there is no solid in the way
                if (!position_meeting(x-4,y+8,obj_solid)) {
    
                    //If the cloud is not active.
                    if (!global.mapcloud) {
    
                        //If the panel, if it exists, is not beaten or not open in the left direction, play the bump sound
                        if ((panel) &amp;&amp; (!panel.beaten) &amp;&amp; (!panel.open[3]))
                            audio_play_sound(snd_bump,0,0);
        
                        //Otherwise, move up 32 pixels
                        else {
                        
                            audio_play_sound(snd_move,0,0);
                            hspeed = -2;
                            alarm[0] = 16;
                        }
                    }
                    
                    //Otherwise, if it's active.
                    else {
                    
                        if ((panel) &amp;&amp; (!panel.open[3])) {
                        
                            //Discard cloud
                            global.mapcloud = false;
                            
                            //Move
                            audio_play_sound(snd_move,0,0);
                            hspeed = -2;
                            alarm[0] = 16;
                        }
                        else {
                        
                            audio_play_sound(snd_move,0,0);
                            hspeed = -2;
                            alarm[0] = 16;                        
                        }
                    }
                }
    
                //Otherwise, play the bump sound
                else {
                
                    audio_play_sound(snd_bump,0,0);
                }            
            }
            
            //If the right key is pressed
            else if (keyboard_check_pressed(vk_right)) {
            
                //If there is no solid in the way
                if (!position_meeting(x+23,y+8,obj_solid)) {
    
                    //If the cloud is not active.
                    if (!global.mapcloud) {
    
                        //If the panel, if it exists, is not beaten or not open in the right direction, play the bump sound
                        if ((panel) &amp;&amp; (!panel.beaten) &amp;&amp; (!panel.open[2]))
                            audio_play_sound(snd_bump,0,0);
        
                        //Otherwise, move up 32 pixels
                        else {
                        
                            audio_play_sound(snd_move,0,0);
                            hspeed = 2;
                            alarm[0] = 16;
                        }
                    }
                    
                    //Otherwise, if it's active.
                    else {
                    
                        if ((panel) &amp;&amp; (!panel.open[2])) {
                        
                            //Discard cloud
                            global.mapcloud = false;
                            
                            //Move
                            audio_play_sound(snd_move,0,0);
                            hspeed = 2;
                            alarm[0] = 16;
                        }
                        else {
                        
                            audio_play_sound(snd_move,0,0);
                            hspeed = 2;
                            alarm[0] = 16;                        
                        }
                    }
                }
    
                //Otherwise, play the bump sound
                else {
                
                    audio_play_sound(snd_bump,0,0);
                }            
            }
            
            //If the inventory is not open, and space is pressed
            else if ((!inventory) &amp;&amp; (keyboard_check_pressed(vk_space))) {
    
                //Play the inventory sound
                audio_play_sound(snd_inventory,0,0);
    
                //Set the event state
                ready = 1
    
                //Open the inventory
                inventory = 1
    
                //Reset the selection
                boxselection = 1
    
                //If the inventory is empty
                if (global.inventory[0] == 0) {
    
                    //If the reserve item is empty, select nothing, otherwise select it
                    boxselection = 0;
                }    
            }
    
            //Change the parent being checked
            panel = collision_point(x+8,y+8,obj_worldparent,0,0)
    
            //If Mario is on a panel
            if ((panel) &amp;&amp; (ready == 0)) {
    
                //If shift is pressed, and the panel can be triggered
                if ((keyboard_check_pressed(vk_shift)) &amp;&amp; (!panel.ready)) {
                
                    //Prevent a bug
                    ready = 3;
    
                    //Prepare to leave the world map
                    event_user(0);
    
                    //Go where the panel takes you
                    with (panel) event_user(3);
                }
            }
        }
    }
    
    //If the inventory is open
    else if (inventory) {
    
        //If space is pressed
        if (keyboard_check_pressed(vk_space)) {
    
            //Play the inventory sound
            audio_play_sound(snd_inventory,0,0)
    
            //Go back to the normal state
            ready = 0
    
            //Close the inventory
            inventory = 0    
        }
    
        //If the inventory is not empty
        else if (boxselection != 0) {
    
            //If shift is pressed
            if (keyboard_check_pressed(vk_shift)) {
            
                //If a powerup is selected.
                if (global.inventory[boxselection] != cs_inventory_star)
                &amp;&amp; (global.inventory[boxselection] != cs_inventory_pwing) 
                &amp;&amp; (global.inventory[boxselection] != cs_inventory_cloud) {
                
                    if (!global.mappwing) {
                    
                        //Play the reserve item sound
                        audio_play_sound(snd_powerup,0,0)
                        
                        //Remember previous powerup
                        var previous = global.powerup;
                    
                        //Change the powerup to the selected item
                        global.powerup = global.inventory[boxselection];
                        
                        //If Mario does not have a powerup.
                        if (previous == 0) {
        
                            //Remove item from inventory
                            global.inventory[boxselection] = 0;
                            
                            //Shift the inventory items over by one
                            for (var i = boxselection; i &lt; global.inventory[0]; i++) {
                            
                                global.inventory[i] = global.inventory[i+1];
                            }
                                
                            //Subtract from the number of items in the inventory
                            global.inventory[0]--;
                        }
                        
                        //Otherwise, replace the powerup with the old powerup.
                        else {
                        
                            global.inventory[boxselection] = previous;
                        }
                        
                        //Finish item retrieval
                        event_user(1);
                    }
                    else {
                    
                        //Deny event
                        audio_play_sound(snd_wrong,0,0);                    
                    }
                }
                
                //Otherwise, if a star got selected.
                else if (global.inventory[boxselection] == cs_inventory_star) {
                
                    if (!global.mapstar) {
                
                        //Play the reserve item sound
                        audio_play_sound(snd_powerup,0,0)
                                                        
                        //Remove item from inventory
                        global.inventory[boxselection] = 0;
                                        
                        //Shift the inventory items over by one
                        for (var i = boxselection; i &lt; global.inventory[0]; i++) {
                        
                            global.inventory[i] = global.inventory[i+1];
                        }
                            
                        //Subtract from the number of items in the inventory
                        global.inventory[0]--;
                        
                        //Give Mario star power on the next level if we didn't.
                        global.mapstar = true;
                        
                        //Finish item retrieval
                        event_user(1);
                    }
                    else {
                    
                        //Deny event
                        audio_play_sound(snd_wrong,0,0);
                    }         
                }
                
                //Otherwise, if a P-Wing got selected.
                else if (global.inventory[boxselection] == cs_inventory_pwing) {
                
                    if (!global.mappwing) {
                    
                        //Play the reserve item sound
                        audio_play_sound(snd_powerup,0,0)
                        
                        //Change the powerup to the selected item.
                        global.powerup = cs_raccoon;
                                                                                
                        //Remove item from inventory
                        global.inventory[boxselection] = 0;
                                        
                        //Shift the inventory items over by one
                        for (var i = boxselection; i &lt; global.inventory[0]; i++) {
                        
                            global.inventory[i] = global.inventory[i+1];
                        }
                            
                        //Subtract from the number of items in the inventory
                        global.inventory[0]--;
                        
                        //Give Mario star power on the next level if we didn't.
                        global.mappwing = true;
                        
                        //Finish item retrieval
                        event_user(1);                        
                    }
                    else {
                    
                        //Deny event
                        audio_play_sound(snd_wrong,0,0);                        
                    }
                }
                
                //Otherwise, if a cloud got selected.
                else if (global.inventory[boxselection] == cs_inventory_cloud) {
                
                    if (!global.mapcloud) {
                
                        //Play the reserve item sound
                        audio_play_sound(snd_powerup,0,0)
                                                        
                        //Remove item from inventory
                        global.inventory[boxselection] = 0;
                                        
                        //Shift the inventory items over by one
                        for (var i = boxselection; i &lt; global.inventory[0]; i++) {
                        
                            global.inventory[i] = global.inventory[i+1];
                        }
                            
                        //Subtract from the number of items in the inventory
                        global.inventory[0]--;
                        
                        //Give Mario star power on the next level if we didn't.
                        global.mapcloud = true;
                        
                        //Finish item retrieval
                        event_user(1);
                    }
                    else {
                    
                        //Deny event
                        audio_play_sound(snd_wrong,0,0);
                    }         
                }
            }
            
            //Select powerups if there's some on the inventory.
            else if (global.inventory[0] != 0) {
            
                //If the Left key is pressed.
                if (keyboard_check_pressed(vk_left)) {
                
                    //Play sound
                    audio_play_sound(snd_move,0,0);                    
                    
                    //If the selected item is the leftmost item.
                    if (boxselection == 1) {
                    
                        //Go to the rightmost item.
                        boxselection = global.inventory[0];
                    }
                    
                    //Otherwise, if the selected item is not the leftmost item.
                    else if (boxselection &gt; 1)
                        boxselection--;
                }
                
                //Otherwise if the right key is pressed.
                else if (keyboard_check_pressed(vk_right)) {
                
                    //Play sound
                    audio_play_sound(snd_move,0,0);                    
                    
                    //If the selected item is the rightmost item.
                    if (boxselection == global.inventory[0]) {
                    
                        //Go to the leftmost item.
                        boxselection = 1;
                    }
                    
                    //Otherwise, if the selected item is not the rightmost item.
                    else if (boxselection &lt; global.inventory[0])
                        boxselection++;
                }
            }
        }    
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory retrieval script

//Go back to the normal state
ready = 0;

//Close the inventory
inventory = 0;

//Create smoke
ID = instance_create(x,y,obj_smoke);
with (ID) {

    depth = other.depth-1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///What happens when Mario enters a level

//Save Mario's current location
ds_map_replace(global.worldmap,"mapx",x)
ds_map_replace(global.worldmap,"mapy",y)

//Stop the music
alarm[4] = 1;

//Play the enter level sound
audio_play_sound(snd_enterstage,0,0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create map card and fade out.

//If the target score was reached for the card minigame to show up, and there is no card panel on the map
if ((score &gt; global.cardscore) &amp;&amp; (!instance_exists(obj_mapcard))) {

    //Set a new target score
    global.cardscore += 80000;

    //Place the minigame panel on the start panel if it needs to be created on Mario's current location
    if ((returnx = x) and (returny = y)) {
    
        instance_create(obj_start.x,obj_start.y,obj_mapcard);
    }

    //Otherwise, create it at the previously beaten level
    else
        instance_create(returnx,returny,obj_mapcard);
}

//Display HUD
instance_create(0,0,obj_maphud);

//Fade out
instance_create(0,0,obj_fade_out);

//Delete all cards
if ((global.card[0] != -1) &amp;&amp; (global.card[1] != -1) &amp;&amp; (global.card[2] != -1)) {

    for (i=0; i&lt;3; i++)
        global.card[i] = -1;
}

//Reset global music variable
global.music = -1;

//Reset global bonus variable.
global.bonus = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Mario

//Draw the map border
draw_sprite_ext(spr_hud_map,0,view_xview[0],view_yview[0],1,1,0,c_white,1);

//Draw the map start box
if (global.mapstart == 1) {

    //Draw box
    draw_sprite_ext(spr_hud_mapstart,0,view_xview[0]+68,view_yview[0]+67,1,1,0,c_white,1);
    
    //Draw mario
    draw_sprite_ext(spr_hud_mapstart_mario,global.powerup,view_xview[0]+132,view_yview[0]+96,1,1,0,c_white,1);
    
    //Set font
    draw_set_font(global.numbers_white);
    
    //World
    draw_text_colour(view_xview[0]+152,view_yview[0]+80,string(global.world),c_white,c_white,c_white,c_white,1);
    
    //Lives
    draw_text_colour(view_xview[0]+160,view_yview[0]+104,string_format(lives,2,0),c_white,c_white,c_white,c_white,1);
}

//Draw Mario
if (ready != 1) {

    //Set the palette.
    if (isflashing &gt; 0) {
    
        pal_swap_set(pal_sprite,current_pal);    
    }
    
    //Draw Mario Shaded
    draw_sprite_ext(sprite_index,-1,round(x),round(y),1,1,0,c_white,image_alpha);
    
    //Reset Shader
    shader_reset();
}
else
    draw_sprite_ext(spr_mapmario_event,-1,round(x),round(y),1,1,0,c_white,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
