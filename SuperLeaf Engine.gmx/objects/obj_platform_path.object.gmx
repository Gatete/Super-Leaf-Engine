<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_platform</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_platformparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A platform that moves in a path.

/*
**  This item uses creation code!
**
**  ready = Whether this platform can move or not move at the start of the room.
**      0:      Do not move
**      1:      Move
**
**  direct = Set up the direction where this platform will move.
**      0:      Right
**      90:     Up
**      180:    Left
**      270:    Down
*/

//Default variables
ready = 0;
direct = 0;

//Remember previous direction
prevdirect = 0;

//Create a temporary platform.
ID = instance_create(-1000,-1000,obj_platform_fake);
with (ID) {

    image_xscale = 3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generate a new platform.

if (ready == 4) {

    //If the starting point is outside the view.
    if (xstart-sprite_width/2 &lt; view_xview[0]-48)
    || (ystart &lt; view_yview[0]-16)    
    || (xstart-sprite_width/2 &gt; view_xview[0]+256)
    || (ystart &gt; view_yview[0]+256) {
    
        //Create a new platform
        with (instance_create(xstart,ystart,obj_platform_path)) direct = other.prevdirect;
        
        //Destroy the old platform
        instance_destroy();
    }
    
    //Otherwise, retrigger.
    else {
    
        alarm[0] = 1;
        exit;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Path Platform logic

//If Mario overlaps the platform.
if (collision_rectangle(bbox_left,bbox_top-5,bbox_right,bbox_top+4,obj_mario,0,0))
&amp;&amp; (obj_mario.state &lt; 2)
&amp;&amp; (obj_mario.vspeed &gt;= 0)
&amp;&amp; (obj_mario.y &lt; bbox_top-11) {

    //Make it move.
    if (ready == 0) {
    
        ready = 1;
        prevdirect = direct;
    }
    
    //Snap Mario above the platform.
    obj_mario.y = ceil(bbox_top-16);
    
    //If the platform is moving to the right.
    if (x-xprevious &gt; 0) {
    
        if (!collision_rectangle(obj_mario.bbox_right,obj_mario.bbox_top+4,obj_mario.bbox_right+1,obj_mario.bbox_bottom-1,obj_solid,0,1))
            obj_mario.x += x-xprevious;
    }
    
    //Otherwise if the platform is moving to the left.
    else if (x-xprevious &lt; 0) {
    
        if (!collision_rectangle(obj_mario.bbox_left-1,obj_mario.bbox_top+4,obj_mario.bbox_left,obj_mario.bbox_bottom-1,obj_solid,0,1))
            obj_mario.x += x-xprevious;        
    }
}

//Cap vertical speed
if (vspeed &gt; 2.5) {

    vspeed = 2.5;
    if ((y &gt; room_height-32) &amp;&amp; (ready == 3)) {
    
        ready = 4;
        alarm[0] = 60;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Makes the platform move around on paths.

//If the platform is moving.
if ((ready == 1) || (ready == 2)) {

    //Check up in what direction is the platform moving.
    switch (direct) {
    
        //If the platform is moving to the right.
        case (0): {
        
            if (collision_point(x+1,y+sprite_height/2,obj_pathparent,1,0))
                x++;
            else if (collision_point(x+1,y+(sprite_height/2)-1,obj_pathparent,1,0)) {
            
                x++;
                y--;
            }
            else if (collision_point(x+1,y+(sprite_height/2)+1,obj_pathparent,1,0)) {
            
                x++;
                y++;
            }
            else if (collision_point(x,y+(sprite_height/2)-1,obj_pathparent,1,0)) {
            
                y--;
                direct = 90;
            }
            else if (collision_point(x,y+(sprite_height/2)+1,obj_pathparent,1,0)) {
            
                y++;
                direct = 270;
            }
            else            
                direct = 180;
        } break;
        
        //Otherwise, if the platform is moving upwards.
        case (90): {
        
            if (collision_point(x,y+(sprite_height/2)-1,obj_pathparent,1,0))     
                y--;
            else if (collision_point(x-1,y+(sprite_height/2)-1,obj_pathparent,1,0)) {
            
                x--;
                y--;
            }
            else if (collision_point(x+1,y+(sprite_height/2)-1,obj_pathparent,1,0)) {
            
                x++;
                y--;
            }
            else if (collision_point(x-1,y+sprite_height/2,obj_pathparent,1,0)) {
            
                x--;
                direct = 180;
            }
            else if (collision_point(x+1,y+sprite_height/2,obj_pathparent,1,0)) {
            
                x++;
                direct = 0;
            }
            else     
                direct = 270;
        } break;
        
        //Otherwise, if the platform is moving to the left.
        case (180): {
        
            if (collision_point(x-1,y+sprite_height/2,obj_pathparent,1,0))         
                x--;
            else if (collision_point(x-1,y+(sprite_height/2)-1,obj_pathparent,1,0)) {
            
                x--;
                y--;
            }
            else if (collision_point(x-1,y+(sprite_height/2)+1,obj_pathparent,1,0)) {
            
                x--;
                y++;
            }
            else if (collision_point(x,y+(sprite_height/2)-1,obj_pathparent,1,0)) {
            
                y--;
                direct = 90;
            }
            else if (collision_point(x,y+(sprite_height/2)+1,obj_pathparent,1,0)) {
            
                y++;
                direct = 270;
            }
            else            
                direct = 0;
        } break;
        
        //Otherwise, if the platform is moving downwards.
        case (270): {
        
            if (collision_point(x,y+(sprite_height/2)+1,obj_pathparent,1,0))    
                y++;
            else if (collision_point(x-1,y+(sprite_height/2)+1,obj_pathparent,1,0)) {
            
                x--;
                y++;
            }
            else if (collision_point(x+1,y+(sprite_height/2)+1,obj_pathparent,1,0)) {
            
                x++;
                y++;
            }
            else if (collision_point(x-1,y+sprite_height/2,obj_pathparent,1,0)) {
            
                x--;
                direct = 180;
            }
            else if (collision_point(x+1,y+sprite_height/2,obj_pathparent,1,0)) {
            
                x++;
                direct = 0;
            }
            else            
                direct = 90;
        } break;
    }
    
    //Check if the path is going to make the platform fall.
    path = collision_point(x+(sprite_width/2),y+(sprite_height/2),obj_pathparent,1,0)
    if ((path) &amp;&amp; (path.endpath))
        ready = 2;
        
    //Make the platform fall once there's no path to follow.
    if (ready == 2) {
    
        //If no path is on the way...
        if ((direct = 0) &amp;&amp; (!collision_point(x+1,y+(sprite_height/2),obj_pathparent,1,0)))
        || ((direct = 90) &amp;&amp; (!collision_point(x,y+(sprite_height/2)-2,obj_pathparent,1,0)))
        || ((direct = 180) &amp;&amp; (!collision_point(x-1,y+(sprite_height/2),obj_pathparent,1,0)))
        || ((direct = 270) &amp;&amp; (!collision_point(x,y+(sprite_height/2)+2,obj_pathparent,1,0))) {
        
            //This platform is falling now
            ready = 3;
            
            //Set the gravity
            gravity = 0.07;
            
            //Set the motion
            motion_set(direct,1)
        }
    }
}

//Call the inherited event
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
