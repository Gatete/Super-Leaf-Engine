<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_event</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manages the level, and required for all levels

/*
**  This item uses creation code!
**
**  levelmusic = The level music. (Any sound resource you load in, check up obj_persistent Game Start event for a list of songs that you can use.)
**  leveltime = The time limit in seconds. (Optional)
**  cam_lock = To lock the camera until Mario flies up.
**  cam_tank = To lock the background on tank levels.
*/

//Default values
levelmusic = 0;
leveltime = 0;
cam_lock = 1;

//Play music
if (global.mapstar == 0) 
&amp;&amp; (global.pswitch == 0) 
&amp;&amp; (global.starman == 0)
    alarm[0] = 2;

//Enable / Disable music
musicdisable = false;

//Screen shake
shake = 0;

//Barrier.
barrier = 1;

//PSwitch is on?
switchon = 0;

//Draw foregrounds.
alarm[5] = 2;

//Enforce barriers.
alarm[7] = 3;

//Following object
view_object[0] = id;

//Initialize Head's Up Display.
instance_create(0,0,obj_hud);

//Extend height of room by 32 pixels.
room_height = room_height+32;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deactivate P-Switch events.

//If the switch is on already.
if (switchon) {

    //Turn off the P-Switch.
    switchon = false;
    
    //Change items.
    pswitch_deactivate();
    
    //Stop the switch song
    FMODInstanceStop(global._stream_pswitch);
    global._stream_pswitch = -1;
    
    //Restart the invincibility music if it was stopped due to overlap.
    if (instance_exists(obj_invincibility)) {
    
        if (obj_invincibility.alarm[0] &gt; -1)    
            obj_invincibility.alarm[2] = 2;
        else
            alarm[0] = 2;
    }
    
    //Otherwise, restart
    else
        alarm[0] = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enforce barrier

barrier = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the screen shake when certain sounds are playing.

if (audio_is_playing(snd_thwomp))
|| (audio_is_playing(snd_sprout_big)) {

    //Shake type
    shake = !shake;
    
    //Repeat
    alarm[6] = 1;    
    
    //Shake the screen...
    if (shake)
        view_yport[0] += 2;
    else
        view_yport[0] -= 2;
}
else {

    shake = 0;
    view_yport[0] = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create foreground layers

var i = 0;
repeat (8) {

    //Create the respective layer for the background.
    if (global.bgfg[i] == true) {
    
        bglayer = instance_create(0,0,obj_foreground);
        bglayer.index = i;
    }
    
    //Find next layer
    i++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kill Mario

//End Timer
global.time = 0;

//Kill Mario
instance_create(obj_mario.x,obj_mario.y,obj_mario_dead);
with (obj_mario) instance_destroy();
exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Warn the player that the time is running out.

//Play 'Hurry up' sound.
audio_play_sound(snd_hurry,0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Decrement the time variable.

if (instance_exists(obj_mario)) {

    if (global.time &gt; 0) {
    
        //Decrement
        global.time--;
        
        //Decrement again after 5/6 a second.
        alarm[2] = 50;
        
        //Play the hurry up sound at 100 seconds left.
        if (global.time == 101) {
        
            alarm[3] = 50;
        }
        else if (global.time == 1) {
        
            alarm[4] = 50;
        }
    }
}
else {

    alarm[2] = 50;
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop the music.

FMODInstanceStop(global._stream);
global._stream = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Loop the music.

if (!FMODInstanceIsPlaying(global._stream_pswitch))
&amp;&amp; (!FMODInstanceIsPlaying(global._stream_starman)) {

    //Deny if music has been disabled.
    if (musicdisable)
    exit;
    
    //If the music is not the same as the music from the previous area.
    if (levelmusic != global.music) {
    
        //Stop old stream
        if (FMODInstanceIsPlaying(global._stream)) {
        
            FMODInstanceStop(global._stream);
            global._stream = -1;
        }
        
        //Play new stream
        global._stream = FMODSoundLoop(levelmusic, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with the music speed.

//Set all music at a higher speed if time is running out.
if ((global.time &gt; 0) &amp;&amp; (global.time &lt; 101)) {

    FMODGroupSetPitch(3,1.3);
}

//Otherwise, set all music speed to default.
else
    FMODGroupSetPitch(3,1);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with various game logic scripts.

//If the autoscroll object exists on room.
if (instance_exists(obj_autoscroll)) {

    //If the camera is locked.
    if (cam_lock) {
    
        //Set the x position of the camera.
        x = obj_autoscroll.x;
        
        //If Mario does exist
        if (instance_exists(obj_mario)) {
        
            //If Mario is at fullspeed and has the raccoon or tanooki powerup or the pwing is active.
            if (((obj_mario.run) &amp;&amp; ((global.powerup == cs_raccoon) || (global.powerup == cs_tanooki))) || (global.pwing)) {
            
                y = obj_mario.y;
                if (view_vspeed[0] != -1)
                    view_vspeed[0] = -1;                    
            }
            
            //Otherwise, if Mario is climbing.
            else if (obj_mario.state == 3) {
            
                y = obj_mario.y;
                if (view_vspeed[0] != 4)
                    view_vspeed[0] = 4;                   
            }
            
            //Otherwise, if Mario is not doing anything stated above and the view is above the view start position.
            else if ((obj_mario.state &lt;= 2) &amp;&amp; (view_yview[0] &lt; room_height-224)) {
            
                //Move towards Mario vertically.
                y = obj_mario.y;
                if (view_vspeed[0] != -1)
                    view_vspeed[0] = -1;           
            }        
        }
        
        //Warp Mario
        else if (instance_exists(obj_mario_warp)) {
        
            //Set the y position of the camera.
            if (view_yview[0] &lt; room_height-224)            
                y = obj_mario_warp.y;            
        }
        
        //Jump Mario
        else if (instance_exists(obj_mario_jump)) {
        
            //Set the y position of the camera.
            if (view_yview[0] &lt; room_height-224)            
                y = obj_mario_jump.y;            
        }
    }
    
    //Otherwise, if the camera is not locked.
    else {
        
        //Set the x position of the camera.
        x = obj_autoscroll.x;
    
        //Set the y position of the camera.
        if (!obj_autoscroll.airship)
            y = obj_autoscroll.y;
        else
            y = obj_autoscroll.y+obj_autoscroll.airshipoffset;
    }
}

//Follow Mario if he exist.
else if (instance_exists(obj_mario)) {

    //If Horizontal wrap is enabled on the current room.
    if (global.hwrap) {
    
        //Set the x position of the camera.
        x = obj_mario.x;
    
        //Set the y position of the camera.
        y = obj_mario.y;        
    }
    else {
    
        //If the camera is locked.
        if (cam_lock) {
        
            //Set the x position of the camera.
            x = obj_mario.x;
            
            //If Mario is at fullspeed and has the raccoon or tanooki powerup or the pwing is active.
            if (((obj_mario.run) &amp;&amp; ((global.powerup == cs_raccoon) || (global.powerup == cs_tanooki))) || (global.pwing)) {
            
                y = obj_mario.y;
                if (view_vspeed[0] != -1)
                    view_vspeed[0] = -1;                    
            }
            
            //Otherwise, if Mario is climbing.
            else if (obj_mario.state == 3) {
            
                y = obj_mario.y;
                if (view_vspeed[0] != 4)
                    view_vspeed[0] = 4;                   
            }
            
            //Otherwise, if Mario is not doing anything stated above and the view is above the view start position.
            else if ((obj_mario.state &lt;= 2) &amp;&amp; (view_yview[0] &lt; room_height-224)) {
            
                //Move towards Mario vertically.
                y = obj_mario.y;
                if (view_vspeed[0] != -1)
                    view_vspeed[0] = -1;           
            }        
        }
        
        //Otherwise, if the camera is not locked.
        else {
        
            //Set the x position of the camera.
            x = obj_mario.x;
        
            //Set the y position of the camera.
            y = obj_mario.y;                
        }
    }
}

//Follow Mario if he is warping through a pipe.
else if (instance_exists(obj_mario_warp)) {

    //If Horizontal wrap is enabled on the current room.
    if (global.hwrap) {
    
        //Set the x position of the camera.
        x = obj_mario_warp.x;
    
        //Set the y position of the camera.
        y = obj_mario_warp.y;        
    }
    else {
    
        //If the camera is locked.
        if (cam_lock) {
        
            //Set the x position of the camera.
            x = obj_mario_warp.x;
        
            //Set the y position of the camera.
            if (view_yview[0] &lt; room_height-224)            
                y = obj_mario_warp.y;
        }
        
        //Otherwise, if it's not locked.
        else {
        
            //Set the x position of the camera.
            x = obj_mario_warp.x;
        
            //Set the y position of the camera.
            y = obj_mario_warp.y;            
        }
    }
}

//Follow Mario if he is jumping.
else if (instance_exists(obj_mario_jump)) {

    //If Horizontal wrap is enabled on the current room.
    if (global.hwrap) {
    
        //Set the x position of the camera.
        x = obj_mario_jump.x;
    
        //Set the y position of the camera.
        y = obj_mario_jump.y;        
    }
    else {
    
        //If the camera is locked.
        if (cam_lock) {
        
            //Set the x position of the camera.
            x = obj_mario_jump.x;
        
            //Set the y position of the camera.
            if (view_yview[0] &lt; room_height-224)            
                y = obj_mario_jump.y;
        }
        
        //Otherwise, if it's not locked.
        else {
        
            //Set the x position of the camera.
            x = obj_mario_jump.x;
        
            //Set the y position of the camera.
            y = obj_mario_jump.y;            
        }
    }
}

//Follow Mario if he cleared the level
else if (instance_exists(obj_mario_goal)) {

    //If Horizontal wrap is enabled on the current room.
    if (global.hwrap) {
    
        //Set the x position of the camera.
        x = obj_mario_goal.x;
    
        //Set the y position of the camera.
        y = obj_mario_goal.y;        
    }
    else {
    
        //If the camera is locked.
        if (cam_lock) {
        
            //Set the x position of the camera.
            x = obj_mario_goal.x;
        
            //Set the y position of the camera.
            if (view_yview[0] &lt; room_height-224)            
                y = obj_mario_goal.y;
        }
        
        //Otherwise, if it's not locked.
        else {
        
            //Set the x position of the camera.
            x = obj_mario_goal.x;
        
            //Set the y position of the camera.
            y = obj_mario_goal.y;            
        }
    }
}

//Round position variables
x = round(x);
y = round(y);

//Deactivate instances outside the view.
event_user(2);
    
//Prevent Mario from going outside the screen if horizontal wrapping is not allowed.
if (!global.hwrap) {

    if ((!barrier) &amp;&amp; (instance_exists(obj_mario))) {
    
        //If Mario is at the left of the screen.
        if (obj_mario.x &lt; view_xview[0]+5) {
        
            //Snap Mario to the left of the screen.
            obj_mario.x = view_xview[0]+5;
            
            //Stop Mario's horizontal speed.
            if (obj_mario.hspeed &lt; 0) {
            
                obj_mario.hspeed = 0;
            }
        }
        
        //Otherwise, if Mario is at the right of the screen.
        else if (obj_mario.x &gt; view_xview[0]+view_wview[0]-5) {
        
            //Snap Mario to the left of the screen.
            obj_mario.x = view_xview[0]+view_wview[0]-5;
            
            //Stop Mario's horizontal speed.
            if (obj_mario.hspeed &gt; 0) {
            
                obj_mario.hspeed = 0;
            }
        }
    }
}

//Get a extra life when 100 coins are collected.
if (global.coins &gt;= 100) {

    //Subtract 100 coins
    global.coins -= 100;
    
    //Get a life
    lives++;
    
    //Play a sound
    if (!audio_is_playing(snd_1up))
        audio_play_sound(snd_1up,0,0);
}

//Make the screen shake if thwomp sound plays
if (!audio_is_playing(snd_thwomp))
&amp;&amp; (!audio_is_playing(snd_sprout_big))
    alarm[6] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deactivate instances outside the view.

//Deactivate instances with 'obj_deactenemyparent' set as parent object.
instance_deactivate_object(obj_deactenemyparent);

//Deactivate instances with 'obj_deactivateparent' set as parent object.
instance_deactivate_object(obj_deactivateparent);

//Activate the previous deactivated instances when inside the window.
instance_activate_region(view_xview[0]-32,view_yview[0]-80,view_wview[0]+32,view_hview[0]+80,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Activate P-Switch events

//If the switch is not turned on yet.
if (!switchon) {

    //Turn the switch on.
    switchon = true;
    
    //Change items
    pswitch_activate();
    
    //Start the switch song if it's not playing.
    alarm[1] = 1;
    if (!FMODInstanceIsPlaying(global._stream_pswitch)) {
    
        global._stream_pswitch = FMODSoundLoop(global._track_pswitch,0);
    }
    
    //Prevent the starman theme from overlapping
    with (obj_invincibility) FMODInstanceStop(global._stream_starman);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy Mario objects

with (obj_mario) instance_destroy();
with (obj_mario_warp) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remember P-Switch if active and disable horizontal wrap.

//Remember previous music
global.music = levelmusic;

//Disable horizontal wrap.
global.hwrap = false;

//Remember pswitch time limit if enabled
if (switchon) {

    //Remember P-Switch time
    global.pswitch = alarm[8]; 
}

//Reset all foregrounds
for (var i=0; i&lt;=7; i++;)
    global.bgfg[i] = false;

//Set the default colour of the platform paths
global.path_colour = c_white;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles Mario Start, room warping, music and timer.

//Set up the time for the level.
if (leveltime &gt; 0) { //If the timer has been set.

    //If the global time for the level is equal to 0.
    if (global.time = 0) {
    
        global.time = leveltime;
        alarm[2] = 50;
    }
    
    //Otherwise, if the time has been set before.
    else if (global.time &gt; 0) {
    
        alarm[2] = 50;
    }
}

//If Mario just started the level
if (!global.mariostart) {

    //The level has started
    global.mariostart = 1

    //Create the Mario Start! effect
    instance_create(view_xview[0],view_yview[0],obj_mariostart)
}
else {

    //Fade out
    instance_create(0,0,obj_fade_out);
}

//If Mario used a star from the inventory
if (global.mapstar) {

    //Make Mario invulnerable
    instance_create(0,0,obj_invincibility);
    
    //Prevent invulnerability until mario gets another star on the map.
    global.mapstar = false;
}

//If Mario used a pwing from the inventory
if (global.mappwing) {

    //Allow infinite flight
    global.pwing = true;

    //Prevent flight until mario gets another pwing on the map.
    global.mappwing = false;
}

//If Mario used a cloud from the inventory
if (global.mapcloud) {

    //Waste it
    global.mapcloud = false;
}

//If Mario came from another room.
if (global.postchange != -1) {

    //Destroy all player objects
    event_user(0);
    
    //Create the appropiate Mario object at the desired location.
    switch (global.postchange) {
    
        //Mario
        case (0): {
        
            instance_create(global.postx,global.posty,obj_mario);
        } break;
        
        //Warp Mario
        case (1): {
        
            instance_create(global.postx,global.posty,obj_mario_warp);
        } break;
        
        //Jump Mario
        case (2): {
        
            instance_create(global.postx,global.posty,obj_mario_jump);
        } break;
    }
    
    //Make Mario able to warp between rooms.
    global.postchange = -1;
}

//Create a kuribo shoe if Mario worn one on the previous room.
if (global.kuriboshoe) {

    //Create a worn shoe.
    instance_create(x,y,obj_kuriboshoe_ride);
}

//Otherwise, if Mario carried an item from the previous room.
else if (global.carrieditem != noone) {

    with (instance_create(x,y,global.carrieditem)) {
    
        //Hold the item.
        held = 1;
        
        //Set up the sprite
        if (global.carriedsprite != noone) {
        
            //Change the sprite
            sprite_index = global.carriedsprite;
            
            //Reset sprite
            global.carriedsprite = noone;    
        }
    }
    
    //If Mario does exist on the room.
    if (instance_exists(obj_mario)) {

        //Make Mario hold the item.
        obj_mario.holding = 1;
    }

    //Reset the variable
    global.carrieditem = noone;
}

//Turn on P-Switch if it was activated on the previous room.
if (global.pswitch &gt; 0) {

    //Turn on the P-Switch
    event_user(1);
    
    //Set the timer
    alarm[8] = max(global.pswitch,30);
    
    //Reset the variable
    global.pswitch = 0;
}

//If a star was active on the previous room.
if (global.starman &gt; 0) {

    //Create a new starman object.
    with (instance_create(0,0,obj_invincibility)) {
    
        alarm[0] = max(global.starman,30);
    }
    
    //Reset the variable
    global.starman = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with parallax backgrounds.

var i = 0; 
repeat (8) {

    //If the background is NOT a foreground.
    if (global.bgfg[i] == false) {
    
        //Handle position of the main background.
        if ((i = 0) &amp;&amp; (background_index[0] &gt; -1)) {
                    
            if (room_height &lt;= 464)
                draw_background_tiled_horizontal_ext(background_index[0],view_xview[0]/2+(background_x[0]+background_hspeed[0]),background_y[0],1,1,0,c_white,background_alpha[0]);
            else    
                draw_background_tiled_horizontal_ext(background_index[0],view_xview[0]/2+(background_x[0]+background_hspeed[0]),background_y[0]+(view_yview[0]*(room_height-background_height[0])/(room_height-view_hview[0])-32),1,1,0,c_white,background_alpha[0]);            
        }
        
        //Handle position of the rest of backgrounds.
        else if ((i &gt; 0) &amp;&amp; (background_index[i] &gt; -1))
            draw_background_tiled_horizontal_ext(background_index[i],view_xview[0]/4+(2*i)+(background_x[i]+background_hspeed[i]),background_y[i],1,1,0,c_white,background_alpha[i]);
    }
    
    //Next layer
    i++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
