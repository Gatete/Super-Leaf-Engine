<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_event</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SuperLeaf Engine controller object.

//Initialize Colour Swap shader.
global.Pal_Shader = shd_palette_swapper;
pal_swap_init_system(global.Pal_Shader);

//Display the fps and the real fps of the application.
showfps = false;

//Initialize all global variables
init_globals();

//Set the message font map for the game.
global.font = font_add_sprite(spr_hud_font,ord("!"),0,0);

//Set the interface font map for the game.
global.font_int = font_add_sprite(spr_hud_font_interface,ord("!"),0,0);

//Set the number map for the game.
global.numbers = font_add_sprite_ext(spr_hud_numbers,"0123456789",0,0);

//Set the white number map for the game.
global.numbers_white = font_add_sprite_ext(spr_hud_numbers_white,"0123456789",0,0);

//Set the epsilon value for floating point numbers
math_set_epsilon(0.00001);

//Set a alternative key bind for the jump key.
keyboard_set_map(ord('X'),vk_shift);

//Set a alternative key bind for the run/shoot key.
keyboard_set_map(ord('Z'),vk_control);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Center the window

window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with various game preferences.

//Change window colour
window_set_colour(make_colour_rgb(34,177,76));

//Keep FMOD updated.
FMODUpdate();

//Prevent lives from going over 99
if (lives &gt; 99)
    lives = 99;

//Prevent score from going over 9.999.990
if (score &gt; 9999990)
    score = 9999990;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle all of the Hot-Keys.

//Display FPS counter.
if (keyboard_check_pressed(ord('F'))) {

    showfps = !showfps;    
}

//Restarts the game.
else if (keyboard_check_pressed(ord('R'))) {

    //Reset all global variables
    init_globals();
    
    //Stop FMOD and streams
    FMODAllStop();
    
    //Stop all audio
    audio_stop_all();
    
    //Go to disclaimer screen
    if (instance_number(obj_fade_in) == 0) {
    
        //Create a fade in effect.
        ID = instance_create(0,0,obj_fade_in);
        with (ID) {
        
            target = rm_disclaimer;
        }
    }    
}

//Ends the game.
else if (keyboard_check_pressed(vk_f4)) {

    //Stop all sounds.
    audio_stop_all();
    
    //Closes the game.
    game_end();
}

//Set window size to default. (ALT+1)
else if (keyboard_check(ord("1"))) {

    //Set up screen to default size. (256x244)
    if (!window_get_fullscreen()) {
    
        //Set up the size of the window.
        window_set_size(256,224);

        //Center the window if it's not centered.
        alarm[0] = 2;
    }
}

//Set window size to double the default size. (ALT+2)
else if (keyboard_check(ord("2"))) {

    //Set up screen to default size. (256x244)
    if (!window_get_fullscreen()) {
    
        //Set up the size of the window.
        window_set_size(512,448);

        //Center the window if it's not centered.
        alarm[0] = 2;
    }
}

//Set window size to triple the default size. (ALT+3)
else if (keyboard_check(ord("3"))) {

    //Set up screen to default size. (256x244)
    if (!window_get_fullscreen()) {
    
        //Set up the size of the window.
        window_set_size(768,672);

        //Center the window if it's not centered.
        alarm[0] = 2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop all sounds from playing

audio_stop_all();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unload FMOD Sound System

//Free the system
FMODfree();
UnloadFMOD();

//Release control key if pressed
keyboard_key_release(vk_control);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load GMFMOD Simple

/*
// INSTRUCTIONS ABOUT ADDING MUSIC ON THE ENGINE.
//
// 1. Add the music file on the music folder under "Included Files".
//
// 2. Then add the global variable with the following data.
//
//      - Group
//          - 0: Title Music
//          - 1: Map
//          - 2: Events (Toad Houses, Minigames)
//          - 3: Level Music
//
//      - Volume (I recommend setting it to 0.7 so you can hear the sound files included on the engine.)
//
//      - Loop Point (If the song does have a loop point, here's how you can get it. (I recommend the use of Audacity to do this.)
//          1. At the bottom of the screen, set the timing to samples.
//          2. Calculate the position of the start of the loop and the end of the loop, I recommend setting it in samples.
//          3. Once you're done with step 2, divide the start loop with the end loop. This will return the value you must use with FMODSoundSetLoopPoints().
//
//  3. To use it, just call the global variable you added before on "obj_levelmanger" and you're done.
*/

//Load FMOD
LoadFMOD();

//Initialize FMOD
FMODinit(100,0);

//Main stream control
global._stream = -1;

//PSwitch stream control
global._stream_pswitch = -1;

//Starman stream control
global._stream_starman = -1;

//Minigame stream control
global._stream_minigame = -1;

//Music Box stream control
global._stream_musicbox = -1;

/*--- TITLE MUSIC ---*/

//Space reserved for title music.

/*--- MAP ---*/

//Map 1
global._track_map1 = FMODSoundAdd("music/map/map1.ogg", 0, 0);
    FMODSoundSetGroup(global._track_map1, 1);
    FMODSoundSetMaxVolume(global._track_map1, 0.7);
    
/*--- EVENTS ---*/

//Bonus Win
global._track_bonuswin = FMODSoundAdd("music/events/bonuswin.ogg", 0, 0);
    FMODSoundSetGroup(global._track_bonuswin, 2);
    FMODSoundSetMaxVolume(global._track_bonuswin, 0.7);
    
//Clear
global._track_clear = FMODSoundAdd("music/events/clear.ogg", 0, 0);
    FMODSoundSetGroup(global._track_clear, 2);
    FMODSoundSetMaxVolume(global._track_clear, 0.7);

//Dead
global._track_dead = FMODSoundAdd("music/events/dead.ogg", 0, 0);
    FMODSoundSetGroup(global._track_dead, 2);
    FMODSoundSetMaxVolume(global._track_dead, 0.7);
    
//Fireworks
global._track_fireworks = FMODSoundAdd("music/events/fireworks.ogg", 0, 0);
    FMODSoundSetGroup(global._track_fireworks, 2);
    FMODSoundSetMaxVolume(global._track_fireworks, 0.7);
    
//Minigame
global._track_slotscreen = FMODSoundAdd("music/events/slotscreen.ogg", 0, 0);
    FMODSoundSetGroup(global._track_slotscreen, 2);
    FMODSoundSetMaxVolume(global._track_slotscreen, 0.7);
    
/*--- LEVEL MUSIC ---*/

//Airship
global._track_airship = FMODSoundAdd("music/airship.ogg", 0, 0);
    FMODSoundSetGroup(global._track_airship, 3);
    FMODSoundSetMaxVolume(global._track_airship, 0.7);
    FMODSoundSetLoopPoints(global._track_airship, 0.1446179129005752, 1);

//Athletic
global._track_athletic = FMODSoundAdd("music/athletic.ogg", 0, 0);
    FMODSoundSetGroup(global._track_athletic, 3);
    FMODSoundSetMaxVolume(global._track_athletic, 0.7);
    FMODSoundSetLoopPoints(global._track_athletic, 0.0934767989240080699394754539341, 1);
    
//Battle
global._track_battle = FMODSoundAdd("music/battle.ogg", 0, 0);
    FMODSoundSetGroup(global._track_battle, 3);
    FMODSoundSetMaxVolume(global._track_battle, 0.7);
    FMODSoundSetLoopPoints(global._track_battle, 0.3191747572815534, 1);
    
//Fortress
global._track_fortress = FMODSoundAdd("music/fortress.ogg", 0, 0);
    FMODSoundSetGroup(global._track_fortress, 3);
    FMODSoundSetMaxVolume(global._track_battle, 0.7);

//Overworld
global._track_overworld = FMODSoundAdd("music/overworld.ogg", 0, 0);
    FMODSoundSetGroup(global._track_overworld, 3);
    FMODSoundSetMaxVolume(global._track_overworld, 0.7);
    FMODSoundSetLoopPoints(global._track_overworld, 0.1194824961948249619482496194825, 1);
    
//P-Switch
global._track_pswitch = FMODSoundAdd("music/pswitch.ogg", 0, 0);
    FMODSoundSetGroup(global._track_pswitch, 3);
    FMODSoundSetMaxVolume(global._track_pswitch, 0.7);
    
//Sky
global._track_sky = FMODSoundAdd("music/sky.ogg", 0, 0);
    FMODSoundSetGroup(global._track_sky, 3);
    FMODSoundSetMaxVolume(global._track_sky, 0.7);
    
//Starman
global._track_starman = FMODSoundAdd("music/starman.ogg", 0, 0);
    FMODSoundSetGroup(global._track_starman, 3);
    FMODSoundSetMaxVolume(global._track_starman, 0.7);
    
//Underwater
global._track_underwater = FMODSoundAdd("music/underwater.ogg", 0, 0);
    FMODSoundSetGroup(global._track_underwater, 3);
    FMODSoundSetMaxVolume(global._track_underwater, 0.7);
    FMODSoundSetLoopPoints(global._track_underwater, 0.1436130007558579, 1);
    
//Underworld
global._track_underworld = FMODSoundAdd("music/underworld.ogg", 0, 0);
    FMODSoundSetGroup(global._track_underworld, 3);
    FMODSoundSetMaxVolume(global._track_underworld, 0.7);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display current FPS

//Set the font
draw_set_font(global.font_int);

//Display FPS
if (showfps)
    draw_text_colour(2,2,"FPS: " + string(fps) + " / " + "REAL FPS: " + string(fps_real),c_white,c_white,c_white,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DO NOT REMOVE!
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
