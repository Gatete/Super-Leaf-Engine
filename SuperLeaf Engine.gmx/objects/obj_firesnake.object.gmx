<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_firesnake</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_deactenemyparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fire Snake

//Animate
image_speed = 0.2;

//Jump
jumping = 0;

//Jump downwards
ready = 0;

//Check previous hspeed
hprev = 0;

//Create body parts
mybody[0] = instance_create(x,y,obj_firesnake_body);
with (mybody[0]) {

    parent = other.id;
}
mybody[1] = instance_create(x,y,obj_firesnake_body);
with (mybody[1]) {

    parent = other.id;
}
mybody[2] = instance_create(x,y,obj_firesnake_body);
with (mybody[2]) {

    parent = other.id;
}
mybody[3] = instance_create(x,y,obj_firesnake_body);
with (mybody[3]) {

    parent = other.id;
}

//Call inherited event
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy body parts

with (mybody[0]) instance_destroy();
with (mybody[1]) instance_destroy();
with (mybody[2]) instance_destroy();
with (mybody[3]) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up flags and movement.

//Jump
alarm[0] = 60;

//Set spiked flag
spiked = true;

//Set fireproof flag
fireproof = true;

//Set the dead sprite
deadspr = spr_firesnake;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump towards Mario

if (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_solidtop,0,1)) 
|| (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+3,obj_slopeparent,1,1)) {

    //Set the horizontal speed
    hspeed = 0.5*sign(xscale);
    hprev = hspeed;
    
    //Set the vertical speed.
    if (instance_exists(obj_mario)) { //If Mario does exist.
    
        //If Mario is above.
        if (obj_mario.y &lt; y) {
        
            //Set the vertical speed.
            vspeed = -3.2;
            
            //Jump
            jumping = 1;
            
            //Make the body jump too.
            for (i=0; i&lt;4; i++) {
            
                mybody[i].alarm[0] = 5+(5*i)
                mybody[i].type = 0;                
            }
        }
        
        //otherwise, if it's below or in the same y position.
        else if (obj_mario.y &gt;= y) {

            //Set the vertical speed.
            vspeed = -1.75;
            
            //Jump
            jumping = 1;
            
            //Otherwise, if it's below.
            if (obj_mario.y &gt; y) {
            
                //Check for nearby solid areas and allow jumping.
                mysolid = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_solidtop,0,1);
                if ((mysolid) &amp;&amp; (mysolid.image_yscale &lt;= 1)) {
                
                    //Jump through solid blocks.
                    ready = 1;
                    
                    //Make the body jump too.
                    for (i=0; i&lt;4; i++) {
                    
                        mybody[i].alarm[0] = 5+(5*i)
                        mybody[i].type = 2;                
                    }
                }
                else {
                
                    //Make the body jump too.
                    for (i=0; i&lt;4; i++) {
                    
                        mybody[i].alarm[0] = 5+(5*i)
                        mybody[i].type = 1;                
                    }                    
                }
            }
            else if (obj_mario.y == y) {
            
                //Make the body jump too.
                for (i=0; i&lt;4; i++) {
                
                    mybody[i].alarm[0] = 5+(5*i)
                    mybody[i].type = 1;                
                }
            }
        }
    }
    
    //Otherwise, if it does not exist.
    else {
    
        //If Mario is above.
        if (obj_levelmanager.y &lt; y) {
        
            //Set the vertical speed.
            vspeed = -3.2;
            
            //Jump
            jumping = 1;
            
            //Make the body jump too.
            for (i=0; i&lt;4; i++) {
            
                mybody[i].alarm[0] = 5+(5*i)
                mybody[i].type = 0;                
            }
        }
        
        //otherwise, if it's below or in the same y position.
        else if (obj_levelmanager.y &gt;= y) {

            //Set the vertical speed.
            vspeed = -1.75;
            
            //Jump
            jumping = 1;
            
            //Otherwise, if it's below.
            if (obj_levelmanager.y &gt; y) {
            
                //Check for nearby solid areas and allow jumping.
                mysolid = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_solidtop,0,1);
                if ((mysolid) &amp;&amp; (mysolid.image_yscale &lt;= 1)) {
                
                    //Jump through solid blocks.
                    ready = 1;
                    
                    //Make the body jump too.
                    for (i=0; i&lt;4; i++) {
                    
                        mybody[i].alarm[0] = 5+(5*i)
                        mybody[i].type = 2;                
                    }
                }
                else {
                
                    //Make the body jump too.
                    for (i=0; i&lt;4; i++) {
                    
                        mybody[i].alarm[0] = 5+(5*i)
                        mybody[i].type = 1;                
                    }                    
                }
            }
            else if (obj_levelmanager.y == y) {
            
                //Make the body jump too.
                for (i=0; i&lt;4; i++) {
                
                    mybody[i].alarm[0] = 5+(5*i)
                    mybody[i].type = 1;                
                }
            }
        }
    }
}
else {

    alarm[0] = 1;
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make sure the body parts don't get lost

if (!instance_exists(mybody[0]))
    instance_activate_object(mybody[0]);
if (!instance_exists(mybody[1]))
    instance_activate_object(mybody[1]);
if (!instance_exists(mybody[2]))
    instance_activate_object(mybody[2]);
if (!instance_exists(mybody[3]))
    instance_activate_object(mybody[3]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default event

//Default Wall collisions.
event_user(0);

//Default Floor / Ceiling collisions.
event_user(1);

//Default underwater script.
var water = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_swim,0,0); //Check for the nearest water object and make the object swim.
if (!swimming) &amp;&amp; (water) {
    
    //Make the object swim.
    swimming = true;
    
    //Stop vertical movement.
    gravity = 0;
    if (vspeed &gt; 0)
        vspeed = 0;
}
else if (swimming) &amp;&amp; (!water) { //If the object is swimming and there's no water above.

    //Make the object not swim.
    swimming = false;
}

//Set up the facing direction.
if (vspeed == 0) {

    if (instance_exists(obj_mario)) {
    
        if (obj_mario.x &gt; x)
            xscale = 1;
        else if (obj_mario.x &lt; x)
            xscale = -1;
    }
    else {
    
        if (obj_levelmanager.x &gt; x)
            xscale = 1;
        else if (obj_levelmanager.x &lt; x)
            xscale = -1;   
    }
}

//Allow jumpthrough
if ((ready == 1) &amp;&amp; (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_solidtop,0,0))) ready = 2;
if ((ready == 2) &amp;&amp; (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_solidtop,0,0))) ready = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Conveyor belt collision.

if (vspeed == 0) {

    //Left conveyor belt collision
    lconv = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_conveyor_l,0,0); 
    if ((lconv) &amp;&amp; (lconv.image_speed != 0)) {
    
        //If there's not a solid on the way.
        if (!collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0)) {
        
            //If the horizontal speed is lower than 0.
            if (hspeed &lt; 0) {
            
                x += hspeed*2;
            }
            
            //Otherwise, if the horizontal speed is equal/greater than 0.
            else {
            
                if (hspeed == 0)
                    x--;
                else
                    x -= hspeed/2;
            }
        }
    }
    
    //Right conveyor belt collision
    rconv = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_conveyor_r,0,0);
    if ((rconv) &amp;&amp; (rconv.image_speed != 0)) {
    
        //If there's not a solid on the way.
        if (!collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,1,0)) {
        
            //If the horizontal speed is greater than 0.
            if (hspeed &gt; 0) {
            
                x += hspeed*2;
            }
            
            //Otherwise, if the horizontal speed is equal/greater than 0.
            else {
            
                if (hspeed == 0)
                    x++;
                else
                    x -= hspeed/2;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wraps around if enabled on the level.

if (global.hwrap) { //If room wrapping is enabled on the room.
    
    //If Mario is nearby the right boundary of the room.
    if (x &gt; room_width) {
    
        //Make Mario go to the left boundary of the room.
        x -= room_width;
    }    
    
    //Otherwise, if Mario is nearby the left boundary of the room.
    else if (x &lt; 0) {
    
        //Make Mario go to the right boundary of the room.
        x += room_width;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_slopeparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slope Collision

//If the object vertical speed is equal/greater than 0.
if (vspeed &gt;= 0) { 
    
    //Stop movement.
    speed = 0;
    gravity = 0;
    
    //Allow jumping again.
    if (jumping == 1) {
    
        //Allow jumping.
        jumping = 0;
        
        //Repeat jumping
        alarm[0] = 60;
    }
}

//Stay embed on the slope.
if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_solidtop,0,0)) {

    //Move 1 pixel upwards
    while (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom-1,obj_slopeparent,1,0))
        y--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solidtop">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Floor collision

//Check if it's jumping through a semisolid
if (ready != 0)
exit;

//If there's a platform nearby and Mario's vertical speed is greater than 0.
if ((bbox_bottom &lt; other.yprevious+5) &amp;&amp; (vspeed &gt; 0)) {

    //Snap to position.
    y = other.yprevious-16;
    
    //Stop movement.
    speed = 0;
    gravity = 0;
    
    //Allow jumping again.
    if (jumping == 1) {
    
        //Allow jumping.
        jumping = 0;
        
        //Repeat jumping
        alarm[0] = 60;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Floor collision

//If there's a platform nearby and Mario's vertical speed is greater than 0.
if ((bbox_bottom &lt; other.yprevious+5) &amp;&amp; (vspeed &gt; 0)) {

    //Snap to position.
    y = other.yprevious-16;
    
    //Stop movement.
    speed = 0;
    gravity = 0;
    
    //Allow jumping again.
    if (jumping == 1) {
    
        //Allow jumping.
        jumping = 0;
        
        //Repeat jumping
        alarm[0] = 60;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Block / raccoon spin kill event.

//Create dead object.
dead = instance_create(x,y+16,obj_enemy_dead);

//Set the sprite
dead.sprite_index = deadspr;

//Set the facing direction
dead.image_xscale = xscale;

//Set a waving movement
dead.hspeed = 0.5;
dead.alarm[0] = 4;

//Set the vertical speed
dead.vspeed = -6;

//Dead followers.
multidead = instance_create(x,y,obj_enemy_multidead);
with (multidead) {

    //Set the enemy parts.
    count = 4;
    
    //Set the spd
    spd = -6;
    
    //Set the xscale
    xscale = 1;
    
    //Set the sprite
    sprite = spr_firesnake_body;
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stomp event

//Create dead object.
dead = instance_create(x,y+16,obj_enemy_dead);

//Set the sprite
dead.sprite_index = deadspr;

//Set the facing direction
dead.image_xscale = xscale;

//Set a waving movement
dead.hspeed = 0.5;
dead.alarm[0] = 4;

//Set the vertical speed
dead.vspeed = 0;

//Dead followers.
multidead = instance_create(x,y,obj_enemy_multidead);
with (multidead) {

    //Set the enemy parts.
    count = 4;
    
    //Set the spd
    spd = 0;
    
    //Set the xscale
    xscale = 1;
    
    //Set the sprite
    sprite = spr_firesnake_body;
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stomp event

//Create dead object.
dead = instance_create(x,y+16,obj_enemy_dead);

//Set the sprite
dead.sprite_index = deadspr;

//Set the facing direction
dead.image_xscale = xscale;

//Set a waving movement
dead.hspeed = 0.5;
dead.alarm[0] = 4;

//Set the vertical speed
dead.vspeed = 0;

//Dead followers.
multidead = instance_create(x,y,obj_enemy_multidead);
with (multidead) {

    //Set the enemy parts.
    count = 4;
    
    //Set the spd
    spd = 0;
    
    //Set the xscale
    xscale = 1;
    
    //Set the sprite
    sprite = spr_firesnake_body;
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kill event

//Create dead object.
dead = instance_create(x,y+16,obj_enemy_dead);

//Set the sprite
dead.sprite_index = deadspr;

//Set the facing direction
dead.image_xscale = xscale;

//Set a waving movement
dead.hspeed = 0.5;
dead.alarm[0] = 4;

//Set the vertical speed
dead.vspeed = -6;

//Dead followers.
multidead = instance_create(x,y,obj_enemy_multidead);
with (multidead) {

    //Set the enemy parts.
    count = 4;
    
    //Set the spd
    spd = -6;
    
    //Set the xscale
    xscale = 1;
    
    //Set the sprite
    sprite = spr_firesnake_body;
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default floor / ceiling collisions.

//Floor collision
if ((collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,0)) &amp;&amp; (!vspeed &lt; 0)) { //If the object is on contact with the floor.

    //Stop vertical speed.
    vspeed = 0
    gravity = 0;
}

//Otherwise, if the object is not in contact with the floor.
else {

    //Set up the gravity.
    if (!swimming) {
    
        gravity = 0.1;
        if (vspeed &gt; 2)
            vspeed = 2;
    }
    else {

        gravity = 0.05;
        if (vspeed &gt; 0.5)
            vspeed = 0.5;
    }
}

//Slope collision
if (vspeed &gt;= 0) {

    //45º Right Slope
    if (place_meeting(x,y+4,obj_slope_sr)) { 
    
        //If the object horizontal speed is lower than 0.
        if (hspeed &lt; 0) { 
    
            //Move x pixels downwards as many horizontal speed the object has to ensure correct slope collision.
            y += 4
        }
    }
    
    //45º Left Slope
    else if (place_meeting(x,y+4,obj_slope_sl)) { 
    
        //If the object horizontal speed is greater than 0.
        if (hspeed &gt; 0) { 
    
            //Move x pixels downwards as many horizontal speed the object has to ensure correct slope collision.
            y += 4;
        }
    }
    
    //22.5º Right Slope
    else if (place_meeting(x,y+2,obj_slope_r)) { 
    
        //If the object horizontal speed is lower than 0.
        if (hspeed &lt; 0) { 
    
            //Move x pixels downwards as many horizontal speed the object has to ensure correct slope collision.
            y += 2;
        }
    }
    
    //22.5º Left Slope
    else if (place_meeting(x,y+2,obj_slope_l)) { 
    
        //If the object horizontal speed is greater than 0.
        if (hspeed &gt; 0) { 
    
            //Move x pixels downwards as many horizontal speed the object has to ensure correct slope collision.
            y += 2;
        }
    }
}

//Ceiling collision
if (vspeed &lt; 0) {

    //If the object is moving upwards and there's a ceiling on the way...
    if (collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top-1,obj_solid,1,0)) { 
        
        //Stop vertical movement.
        vspeed = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
