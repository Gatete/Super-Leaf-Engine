<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_shell</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_enemyparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The shell of a koopa.

//Animate
image_speed = 0;

//Get out if not kicked
alarm[0] = 480;
alarm[1] = 600;
shake = 0;

//Facing direction
xscale = -1;

//Is the enemy spiked
spiked = 0;

//Combo
hitcombo = 0;

//Hurt Mario?
harmmario = 0;

//Is the object swimming
swimming = 0;

//Is the shell kicked?
kicked = 0;

//Check if the shell can enter on small gaps
check = false;

//Is the enemy fire proof?
fireproof = 0;
alarm[2] = 1;

//Set the dead sprite.
deadspr = sprite_index;
alarm[4] = 1;

//Is the enemy spin proof.
spinproof = 0;

//Is the enemy block proof.
blockproof = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set the dead sprite.

//If the shell is from a green koopa troopa.
if ((sprite_index == spr_shell) || (sprite_index == spr_shell_down)) {

    deadspr = spr_shell;
}

//Otherwise, if the shell is from a red koopa troopa.
else if ((sprite_index == spr_shell_red) || (sprite_index == spr_shell_red_down)) {

    deadspr = spr_shell_red;
}

//Otherwise, if the shell is from a big green koopa troopa.
else if ((sprite_index == spr_shell_big) || (sprite_index == spr_shell_big_down)) {

    deadspr = spr_shell_big;
}

//Otherwise, if the shell is from a big red koopa troopa.
else if ((sprite_index == spr_shell_red_big) || (sprite_index == spr_shell_red_big_down)) {

    deadspr = spr_shell_red_big;
}

//Otherwise, if the shell is from a buzzy beetle.
else if ((sprite_index == spr_shell_buzzy) || (sprite_index == spr_shell_buzzy_down)) {

    deadspr = spr_shell_buzzy;
}

//Otherwise, if the shell is from a spiny.
else if (sprite_index == spr_shell_spiny) {

    deadspr = spr_shell_spiny_dead;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the shell able or not able to hurt Mario.
if (!place_meeting(x,y,obj_mario))
    harmmario = true;
else
    alarm[3] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Become invulnerable to fire.

if (sprite_index == spr_shell_buzzy)
|| (sprite_index == spr_shell_buzzy_down) {

    fireproof = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get out

if (!kicked) {

    //If the shell is from a green koopa troopa.
    if ((sprite_index == spr_shell) || (sprite_index == spr_shell_down)) {
    
        instance_create(x,y,obj_koopa);
        instance_destroy();
        exit;
    }
    
    //Otherwise, if the shell is from a red koopa troopa.
    else if ((sprite_index == spr_shell_red) || (sprite_index == spr_shell_red_down)) {
    
        instance_create(x,y,obj_koopa_red);
        instance_destroy();
        exit;
    } 
    
    //Otherwise, if the shell is from a big green koopa troopa.
    else if ((sprite_index == spr_shell_big) || (sprite_index == spr_shell_big_down)) {
    
        instance_create(x,y,obj_koopa_big);
        instance_destroy();
        exit;
    }
    
    //Otherwise, if the shell is from a big red koopa troopa.
    else if ((sprite_index == spr_shell_red_big) || (sprite_index == spr_shell_red_big_down)) {
    
        instance_create(x,y,obj_koopa_red_big);
        instance_destroy();
        exit;
    }

    //Otherwise, if the shell is from a buzzy beetle.
    else if ((sprite_index == spr_shell_buzzy) || (sprite_index == spr_shell_buzzy_down)) {
    
        instance_create(x,y,obj_buzzybeetle);
        instance_destroy();
        exit;
    }

    //Otherwise, if the shell is from a spiny
    else if (sprite_index == spr_shell_spiny) {
    
        instance_create(x,y,obj_spiny);
        instance_destroy();
        exit;
    }   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shake before getting out.

if (!kicked) {

    alarm[0] = 1;
    if (shake != 1)
        shake = 1;
    else
        shake = -1;
}
else {

    shake = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default event

//Default Wall collisions.
event_user(0);

//Default Floor / Ceiling collisions.
event_user(1);

//Default underwater script.
var water = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_swim,0,0); //Check for the nearest water object and make the object swim.
if (!swimming) &amp;&amp; (water) {
    
    //Make the object swim.
    swimming = true;
    
    //Stop vertical movement.
    gravity = 0;
    if (vspeed &gt; 0)
        vspeed = 0;
}
else if (swimming) &amp;&amp; (!water) { //If the object is swimming and there's no water above.

    //Make the object not swim.
    swimming = false;
}

//Handle kick events
if (!kicked) {
    
    //Slowdown in contact with the ground.
    if (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_solidtop,0,0))
    || (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_slopeparent,1,0)) {
    
        //Reduce the item speed until it stops.
        hspeed = max(0,abs(hspeed)-0.075)*sign(hspeed);
        
        //Set up horizontal speed to 0 when hspeed hits 0.075.
        if ((hspeed &lt; 0.075) &amp;&amp; (hspeed &gt; -0.075)) {
        
            hspeed = 0;
        }        
    }
}
else if (kicked) {

    //Slowdown if nearby a 1 block gap.
    if ((collision_rectangle(bbox_left-4,bbox_top+4,bbox_left,bbox_bottom+4,obj_solid,0,0)) &amp;&amp; (hspeed &lt; 0))
    || ((collision_rectangle(bbox_right,bbox_top+4,bbox_right+4,bbox_bottom+4,obj_solid,0,0)) &amp;&amp; (hspeed &gt; 0)) {
    
        if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+4,obj_solidtop,0,0))
        &amp;&amp; (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+4,obj_slopeparent,1,0)) {
        
            //Move 4 pixels downwards.
            if (check == false) {
            
                y += 4;
                check = true;
            }
        }
        else {
        
            //Make the shell able to enter on small gaps.
            check = false;
        }
    }
    else {
    
        //Make the shell able to enter on small gaps.
        check = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Conveyor belt collision.

//Left conveyor belt collision
lconv = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_conveyor_l,0,0); 
if ((lconv) &amp;&amp; (lconv.image_speed != 0)) {

    //If there's not a solid on the way.
    if (!collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0)) {
    
        //If the horizontal speed is lower than 0.
        if (hspeed &lt; 0)
            exit;
        
        //Otherwise, if the horizontal speed is equal/greater than 0.
        else {
        
            if (hspeed == 0)
                x--;
            else
                x -= hspeed/2;
        }
    }
}

//Right conveyor belt collision
rconv = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_conveyor_r,0,0);
if ((rconv) &amp;&amp; (rconv.image_speed != 0)) {

    //If there's not a solid on the way.
    if (!collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,1,0)) {
    
        //If the horizontal speed is greater than 0.
        if (hspeed &gt; 0)
            exit;
        
        //Otherwise, if the horizontal speed is equal/greater than 0.
        else {
        
            if (hspeed == 0)
                x++;
            else
                x -= hspeed/2;
        }
    }
}

//Platform collision
semisolid = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_solidtop_tanks,0,0);
if (semisolid) 
&amp;&amp; (vspeed &gt;= 0) 
&amp;&amp; (bbox_bottom &lt; semisolid.yprevious+5) {

    //Snap into position
    y = semisolid.bbox_top-16;
    
    //Snap horizontally
    if (semisolid.x-xprevious &lt; 0) &amp;&amp; (!collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,0,1))
    || (semisolid.x-xprevious &gt; 0) &amp;&amp; (!collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,0,1))
        x += semisolid.x-semisolid.xprevious;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wraps around if enabled on the level.

if (global.hwrap) { //If room wrapping is enabled on the room.
    
    //If Mario is nearby the right boundary of the room.
    if (x &gt; room_width) {
    
        //Make Mario go to the left boundary of the room.
        x -= room_width;
    }    
    
    //Otherwise, if Mario is nearby the left boundary of the room.
    else if (x &lt; 0) {
    
        //Make Mario go to the right boundary of the room.
        x += room_width;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemyparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with a enemy.

if (kicked) {

    //Kill the enemy.
    with (other) {
    
        event_user(4);
    }
    
    //Give points.
    with (instance_create(other.x,other.y,obj_score)) {
        if (other.hitcombo &lt; 8) {
            switch (other.hitcombo) {
            
                case (0): audio_play_sound(snd_kick,0,0); break;
                case (1): audio_play_sound(snd_kick2,0,0); break;
                case (2): audio_play_sound(snd_kick3,0,0); break;
                case (3): audio_play_sound(snd_kick4,0,0); break;
                case (4): audio_play_sound(snd_kick5,0,0); break;
                case (5): audio_play_sound(snd_kick6,0,0); break;
                case (6): audio_play_sound(snd_kick7,0,0); break;
                case (7): audio_play_sound(snd_kick8,0,0); break;
            }
            
            //Give points
            event_user(0+other.hitcombo);
        }
        else {
        
            //Play a sound
            audio_play_sound(snd_kick8,0,0); 
        
            //Give a 1-UP or 10.000 points     
            event_user(8);
        }
    }
    
    //Increment combo
    hitcombo++;
    
    //Create a hit effect
    with (instance_create(x,y,obj_smoke)) {
        
        sprite_index = spr_spinthump;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_slopeparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slope Collision

//If the object vertical speed is equal/greater than 0.
if (vspeed &gt;= 0) { 
    
    //Stop vertical speed.
    gravity = 0;
    if (kicked)
        vspeed = 0;
    else
        vspeed = -vspeed/2; 
}

//Stay embed on the slope.
if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_solidtop,0,0)) {

    //Move 1 pixel upwards
    while (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom-1,obj_slopeparent,1,0))
        y--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solidtop">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Floor collision

//If there's a platform nearby and Mario's vertical speed is greater than 0.
if ((bbox_bottom &lt; other.yprevious+5) &amp;&amp; (vspeed &gt; 0)) {

    //Snap to position.
    y = other.yprevious-16;
    
    //Stop vertical speed.
    gravity = 0;
    if (kicked)
        vspeed = 0;
    else
        vspeed = -vspeed/2;    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mario">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with Mario.

//Deny event if starman is active.
if (instance_exists(obj_invincibility))
exit;

//Deny if Mario is behind the scenery.
if (obj_mario.depth == 16) {

    if (obj_mario.tile12 &gt; -1) || (obj_mario.tile15 &gt; -1)
        exit;
}

//If the shell is in pick up mode and Mario is not wearing a kuribo shoe.
if (!harmmario)
&amp;&amp; ((!global.kuriboshoe) || (other.bbox_bottom &gt;= bbox_top-vspeed+5)) {

    if (!kicked) {
    
        //If Mario is below the enemy and he can pick it up.
        if (other.bbox_bottom &gt;= bbox_top-vspeed+5) &amp;&amp; (scr_can_hold()) {
        
            //Create a pickable shell.
            with (instance_create(x,y,obj_shell_held)) {
            
                sprite_index = other.sprite_index;
                alarm[1] = other.alarm[1];
                if (other.alarm[0] = -1)
                    alarm[0] = 1;
                else
                    alarm[0] = other.alarm[0];                
            }
            
            //Destroy
            instance_destroy();
        }
        else {
        
            //Play kick sound
            audio_play_sound(snd_kick,0,0);
        
            //Kick it
            kicked = 1;
            
            //Animate
            image_speed = 0.5;
            
            //Go away from Mario.
            if (obj_mario.x &lt; x) {
            
                x += 4;
                hspeed = 2.7;
            }
            else {
            
                x -= 4;
                hspeed = -2.7;
            }
                
            //Make Mario kick it.
            with (other) event_user(7);
            
            //Start hurting Mario
            alarm[3] = 1;
        }
    }
}

//Otherwise, use default event.
else {

    //Deny event if starman is active.
    if (instance_exists(obj_invincibility))
    exit;
    
    //If Mario is sliding down a slope.
    if (!other.sliding) {
    
        //If Mario is above and moving down.
        if ((other.bbox_bottom &lt; bbox_top-vspeed+5) &amp;&amp; (other.vspeed &gt;= 0)) {
    
            //If Mario is wearing a kuribo shoe.
            if (global.kuriboshoe) {
            
                //Play a stomp sound
                audio_play_sound(snd_stomp,0,0);
                
                //Execute combo script.
                musical_scale(other.id,id,0);
                
                //Kill enemy
                event_user(6);
                
                //Make Mario jump
                with (other) event_user(1);            
                                    
                //Create hit effect.
                ID = instance_create(other.x,other.bbox_bottom-8,obj_smoke);
                with (ID) {
                
                    sprite_index = spr_spinthump;
                }    
            }
            
            //Otherwise, use default event.
            else {
            
                //If the enemy is not spiked.
                if (!spiked) {
            
                    //Play a stomp sound
                    audio_play_sound(snd_stomp,0,0);
                    
                    //Execute combo script.
                    musical_scale(other.id,id,0);
                
                    //Default stomp event.
                    event_user(5);
                    
                    //Make Mario jump
                    with (other) event_user(1);            
                                        
                    //Create hit effect.
                    ID = instance_create(other.x,other.bbox_bottom-8,obj_smoke);
                    with (ID) {
                    
                        sprite_index = spr_spinthump;
                    }
                }
                
                //Otherwise, if the enemy is spiked.
                else {
                
                    //Hurt Mario
                    with (other) event_user(0);                
                }
            }
        }
        else {
        
            //Hurt Mario
            with (other) event_user(0);
        }
    }
    
    //Otherwise, if Mario is sliding down a slope.
    else {
    
        //If the enemy is not spiked.
        if (!spiked) {
        
            //Execute combo script.
            musical_scale(other.id,id,1);
            
            //Kill enemy
            kill(x,y+16,deadspr,1,-4);
            
            //Create hit effect.
            ID = instance_create(other.x,other.y,obj_smoke);
            with (ID) {
            
                sprite_index = spr_spinthump;
            }
        }
        
        //Otherwise, if the enemy is spiked.
        else {
        
            //Hurt Mario
            with (other) event_user(0);        
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Force kick the shell

//Do harm
alarm[3] = 1;

//Force kick
kicked = 1;

//Animate
image_speed = 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn into a upside down shell.

//Create a shell
myshell = instance_create(x,y-8,obj_shell);

//Set the sprite of the shell.
if (sprite_index = spr_shell) {

    myshell.sprite_index = spr_shell_down;
}
else if (sprite_index = spr_shell_big) {

    myshell.sprite_index = spr_shell_big_down;
}
else if (sprite_index = spr_shell_red) {

    myshell.sprite_index = spr_shell_red_down;
}
else if (sprite_index = spr_shell_red_big) {

    myshell.sprite_index = spr_shell_red_big_down;
}
else if (sprite_index = spr_shell_buzzy) {

    myshell.sprite_index = spr_shell_buzzy_down;
}
else {

    myshell.sprite_index = sprite_index;
}

//Set the vertical speed
myshell.vspeed = -5;

//Set the horizontal speed
if (other.x &lt; x)
    myshell.hspeed = 0.6;
else if (other.x &gt; x)
    myshell.hspeed = -0.6;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn into a shell.

//Create a shell
myshell = instance_create(x,y,obj_shell);
with (myshell) {

    sprite_index = other.sprite_index;
}

//Destroy Koopa
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default wall collisions.

if ((hspeed &lt; 0) &amp;&amp; (collision_line(bbox_left-3,bbox_top+4,bbox_left-3,bbox_bottom-4,obj_solid,0,0)))
|| ((hspeed &gt; 0) &amp;&amp; (collision_line(bbox_right+3,bbox_top+4,bbox_right+3,bbox_bottom-4,obj_solid,0,0))) {

    //Reverse horizontal speed
    hspeed = hspeed*-1;
    
    //Bump nearby blocks if kicked.
    if (kicked) {
   
        //Play 'Bump' sound
        if (x &gt; view_xview[0]-16)
        &amp;&amp; (y &gt; view_yview[0]-16)
        &amp;&amp; (x &lt; view_xview[0]+336)
        &amp;&amp; (y &lt; view_yview[0]+240) {
        
            if (!audio_is_playing(snd_bump))
                audio_play_sound(snd_bump,0,0);
        }
        
        //Create block bumper
        instance_create(x,bbox_top,obj_blockbumper);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw selected object

draw_sprite_ext(sprite_index,-1,round(x)+shake,round(y)+1,xscale,1,0,c_white,1);
if (global.hwrap) {

    if (x &gt; room_width-(abs(sprite_width/2))) {
    
        draw_sprite_ext(sprite_index,-1,round(x)-room_width+shake,round(y)+1,xscale,1,0,c_white,1);
    }
    else if (x &lt; (abs(sprite_width/2))) {
    
        draw_sprite_ext(sprite_index,-1,round(x)+room_width+shake,round(y)+1,xscale,1,0,c_white,1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
