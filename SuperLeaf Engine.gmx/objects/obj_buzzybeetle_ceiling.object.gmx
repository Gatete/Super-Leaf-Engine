<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_buzzybeetle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_buzzybeetle</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ceiling Buzzy Beetle

//Fall if Mario is nearby.
ready = 0;

//Call the inherited event
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation

//If the buzzy beetle is still on the ceiling.
if (!ready) {

    //Animate
    image_speed = 0.15;
}

//Otherwise, if he detected Mario and he's falling down.
else if (ready) {

    //Do not animate.
    image_speed = 0;
    image_index = 0;
    
    //Set up the sprite
    sprite_index = spr_shell_buzzy;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default event

//Default wall collision.
event_user(0);

//Turn at enemies script.
event_user(2);

//Check if Mario is nearby and fall if so.
if (!ready) {

    if (instance_exists(obj_mario)) {
    
        //If Mario is nearby and below the enemy.
        if ((obj_mario.x &gt; x-32) &amp;&amp; (obj_mario.x &lt; x+32) &amp;&amp; (obj_mario.y &gt; y)) {
        
            speed = 0;
            ready = 1;
            exit;
        }
    }
    
    //Turn at ceilings script
    if ((hspeed &lt; 0) &amp;&amp; (!position_meeting(bbox_left,y-4,obj_solid)))
        hspeed = -hspeed;
    else if ((hspeed &gt; 0) &amp;&amp; (!position_meeting(bbox_right,y-4,obj_solid)))
        hspeed = -hspeed;
}

//If the buzzy beetle is already falling.
else if (ready) {

    //Default floor collision
    event_user(1);
    
    //Default underwater script.
    var water = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_swim,0,0); //Check for the nearest water object and make the object swim.
    if (!swimming) &amp;&amp; (water) {
        
        //Make the object swim.
        swimming = true;
        
        //Stop vertical movement.
        gravity = 0;
        if (vspeed &gt; 0)
            vspeed = 0;
    }
    else if (swimming) &amp;&amp; (!water) { //If the object is swimming and there's no water above.
    
        //Make the object not swim.
        swimming = false;
    }
}

//Set the facing direction
if (hspeed &gt; 0)
    xscale = 1;
if (hspeed &lt; 0)
    xscale = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Conveyor belt collision.

if (vspeed == 0) {

    //Left conveyor belt collision
    lconv = collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top,obj_conveyor_l,0,0); 
    if ((lconv) &amp;&amp; (lconv.image_speed != 0)) {
    
        //If there's not a solid on the way.
        if (!collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0)) {
        
            //If the horizontal speed is lower than 0.
            if (hspeed &lt; 0) {
            
                x += hspeed*2;
            }
            
            //Otherwise, if the horizontal speed is equal/greater than 0.
            else {
            
                if (hspeed == 0)
                    x--;
                else
                    x -= hspeed/2;
            }
        }
    }
    
    //Right conveyor belt collision
    rconv = collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top,obj_conveyor_r,0,0);
    if ((rconv) &amp;&amp; (rconv.image_speed != 0)) {
    
        //If there's not a solid on the way.
        if (!collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,1,0)) {
        
            //If the horizontal speed is greater than 0.
            if (hspeed &gt; 0) {
            
                x += hspeed*2;
            }
            
            //Otherwise, if the horizontal speed is equal/greater than 0.
            else {
            
                if (hspeed == 0)
                    x++;
                else
                    x -= hspeed/2;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wraps around if enabled on the level.

if (global.hwrap) { //If room wrapping is enabled on the room.
    
    //If Mario is nearby the right boundary of the room.
    if (x &gt; room_width) {
    
        //Make Mario go to the left boundary of the room.
        x -= room_width;
    }    
    
    //Otherwise, if Mario is nearby the left boundary of the room.
    else if (x &lt; 0) {
    
        //Make Mario go to the right boundary of the room.
        x += room_width;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default floor / ceiling collisions.

//Floor collision
if (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+2,obj_solidtop,0,0)) 
|| (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+2,obj_slopeparent,1,0)) { //If the object is on contact with the floor.

    //Create a shell.
    myshell = instance_create(x,y,obj_shell);
    with (myshell) {
    
        //Set the horizontal speed.
        if (instance_exists(obj_mario)) {
        
            if (obj_mario.x &gt; x)
                hspeed = 2;
            else if (obj_mario.x &lt; x)
                hspeed = -2;
        }
        else {
        
            if (obj_levelmanager.x &gt; x)
                hspeed = 2;
            else if (obj_levelmanager.x &lt; x)
                hspeed = -2;
        }
        
        //Force kick
        event_user(15);
        
        //Set up the sprite
        sprite_index = spr_shell_buzzy_down;        
    }
    
    //Destroy
    instance_destroy();
}

//Otherwise, if the object is not in contact with the floor.
else {

    //Set up the gravity.
    if (!swimming) {
    
        gravity = 0.2;
        if (vspeed &gt; 4)
            vspeed = 4;
    }
    else {

        gravity = 0.0625;
        if (vspeed &gt; 1)
            vspeed = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw selected object

draw_sprite_ext(sprite_index,-1,round(x),round(y)+15,xscale,-1,0,c_white,1);
if (global.hwrap) {

    if (x &gt; room_width-(abs(sprite_width/2))) {
    
        draw_sprite_ext(sprite_index,-1,round(x)-room_width,round(y)+15,xscale,-1,0,c_white,1);
    }
    else if (x &lt; (abs(sprite_width/2))) {
    
        draw_sprite_ext(sprite_index,-1,round(x)+room_width,round(y)+15,xscale,-1,0,c_white,1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
