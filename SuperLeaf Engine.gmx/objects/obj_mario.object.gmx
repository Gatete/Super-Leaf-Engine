<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///It's a me, Mario!

//Handle Mario's animation state. (0: Idle, 1: Walk, 2: Jump, 3: Climb)
state = 0;

//Handle Mario's direction. (1: Right, -1: Left)
xscale = 1;

//Direction to move when Mario is stuck.
direct = 1;
    
//Handle Mario's holding poses. (0: Can hold, 1: Is Holding)
holding = 0;
    
//Handle Mario's variable jump state. (0: Can jump, 1: Variable jump, 2: No variable jump)
jumping = 0;

//Plays a sound when Mario is climbing a vine
noise = 0;

//Shake Mario if paralyzed
paralyzed = false;

//Is Mario running.
run = false;

//Is Mario doing a barrel roll.
starjump = false;
    
//Is Mario turning direction?
skidnow = false;

//Is Mario swimming?
swimming = false;

//Is Mario sliding down a slope?
sliding = false;

//Is Mario flying?
flying = false;

//Is Mario crouched down?
duck = false;

//Is Mario movement disabled?
move = false;

//Is Mario kicking something?
kicking = false;

//Is Mario turning when holding something
turning = false;

//Is Mario on the ground.
infloor = false;

//Is Mario's gravity disabled?
disablegrav = 0;

//Is Mario invulnerable?
invulnerable = false;

//Are Mario's controls disabled?
disablecontrol = false;

//Is Mario stuck on a wall?
inwall = false;

//Is Fire / Hammer Mario firing a projectile?
firing = 0;

//Is Raccoon / Tanooki Mario wiggling his tail?
wiggle = 0;

//In what direction is Frog Mario swimming in?
swimdir = 0;

//Prevent Mario from grabbing a shoe after exiting one
delay = 0;

//Shake when paralyzed
shakey = 0;

//Prevent Mario from being hurt if behind the scenery
tile12 = -1;
tile15 = -1;

//Handle P-Meter
pmeter = 0;
pmeterready = false;

//How many consecutive stomps has Mario made?
hitcombo = 0;

//Is Mario flashing.
isflashing = 0;

//Initialize particle effects.
alarm[4] = 1;
alarm[8] = 1;
alarm[9] = 1;
alarm[10] = 1;

//Set the palette sprite.
pal_sprite = spr_palette;
current_pal = 0;

//Create markers
instance_create(0,0,obj_marker_head);
instance_create(0,0,obj_marker_bottom);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop these sounds from playing.

//Destroy spinner
if (instance_exists(obj_spinner)) {

    with (obj_spinner) {
    
        instance_destroy();
    }
}

//Stop 'skid' sound if Mario was skidding.
if (audio_is_playing(snd_skid))
    audio_stop_sound(snd_skid);
    
//Stop 'P-Meter' sound if Mario was running.
if (audio_is_playing(snd_pmeter))
    audio_stop_sound(snd_pmeter);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart flying ability

//Deny if pwing is active.
if (global.pwing)
exit;

//Allow Mario to fly again.
flying = false;

//Reset P-Meter
pmeter = 0;
pmeterready = 0;

//Make Mario walk
run = 0;

//Stop P-Meter sound.
audio_stop_sound(snd_pmeter);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle particle effects.

if (skidnow) || ((sliding) &amp;&amp; (state &lt; 2)) { //If Mario is turning, sliding and in contact with the floor.

    //If Mario is not crouched down.
    if (duck == false) {
    
        //If Mario is not behind the layers.
        if (depth != 16) {
        
            //Create effect.
            with (instance_create(x,bbox_bottom,obj_smoke)) sprite_index = spr_smoke_c;
        }
        
        //Repeat the process.
        alarm[10] = 4;
    }
    
    //Otherwise, if Mario is crouched down.
    else {
    
        //Hold the process until Mario is not crouched down.
        alarm[10] = 1;
    }
}
else {

    //Hold the process until one of the above conditions are true.
    alarm[10] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Mario's flashing effect.

//Make Mario flash if he's under the effects of the starman.
if (instance_exists(obj_invincibility)) {

    //Make Mario flash.
    isflashing = (isflashing mod 4)+1;
    
    //Repeat the process.
    if (obj_invincibility.alarm[0] &gt; 120)
        alarm[9] = 4;
    else
        alarm[9] = 8;
}
else {

    isflashing = 0;
    alarm[9] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create a bubble if Mario is swimming.

if (swimming) {

    instance_create(x,bbox_top,obj_bubble);
}

//Create another bubble.
alarm[8] = 45+random_range(15,-15);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop Mario's kick pose.

kicking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop Mario's turn pose.

turning = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End white block sequence

if ((!tile12) &amp;&amp; (!tile15)) {

    //Set Mario's depth back to normal.
    depth = -5;
}
else {

    //Repeat till there's not a tile of layer 12 or 15 at the same spot.
    alarm[5] = 1;
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shake

if (paralyzed) {

    alarm[4] = 1;
    if (shakey != 1)
        shakey = 1;
    else
        shakey = 0;
}
else
    shakey = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enable Mario's controls

//Disable Mario's controls
disablecontrol = false;

//Unparalyze Mario
paralyzed = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Disable Mario's controls temporarily

//Disable Mario's controls
disablecontrol = true;
paralyzed = true;

//Enable Mario's controls
alarm[3] = 120;

//Make Mario shake
alarm[4] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario blink when hit.

if (invulnerable) {

    alarm[1] = 1;
    if (image_alpha != 1)
        image_alpha = 1;
    else
        image_alpha = 0;
}
else {

    image_alpha = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario vulnerable to all hazards.

invulnerable = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Mario's animations

//Small Mario
if (global.powerup == cs_small) {

    //Execute Small Mario animation script.
    scr_mario_small();
    
    //Make Mario not able to duck.
    if (duck) {
    
        duck = false;
    }
}

//Frog Mario
else if (global.powerup == cs_frog) {

    //Execute Frog Mario animation script.
    scr_mario_frog();
    
    //Make Mario not able to duck.
    if (duck) {
    
        duck = false;
    } 
}

//Rest of powerups.
else {

    //If Mario is crouched down.
    if (duck) {
    
        //Set up the duck pose for each powerup.
        switch (global.powerup) {
        
            //Big Mario
            case (cs_big): {
            
                sprite_index = spr_mario_big_duck;
            } break;
            
            //Fire Mario
            case (cs_fire): {
            
                sprite_index = spr_mario_fire_duck;
            } break;
            
            //Raccoon Mario
            case (cs_raccoon): {
            
                sprite_index = spr_mario_raccoon_duck;
            } break;
            
            //Tanooki Mario
            case (cs_tanooki): {
            
                sprite_index = spr_mario_tanooki_duck;
            } break;
            
            //Hammer Mario
            case (cs_hammer): {
            
                sprite_index = spr_mario_hammer_duck;
            } break;
        }
        
        //Do not animate.
        image_speed = 0;
        image_index = 0+(wiggle/4);
        
        //Set the mask
        mask_index = spr_mask;
    }
    else { //Otherwise, if Mario is not crouched down.
    
        //Handle the powerup animations.
        switch (global.powerup) {
        
            //Big Mario
            case (cs_big): {
            
                //Execute Big Mario animation script.
                scr_mario_big();
            } break;
            
            //Fire Mario
            case (cs_fire): {
            
                //Execute Fire Mario animation script.
                scr_mario_fire();
            } break;
            
            //Raccoon Mario
            case (cs_raccoon): {
            
                //Execute Raccoon Mario animation script.
                scr_mario_raccoon();
            } break;
            
            //Raccoon Mario
            case (cs_tanooki): {
            
                //Execute Raccoon Mario animation script.
                scr_mario_tanooki();
            } break;

            //Raccoon Mario
            case (cs_hammer): {
            
                //Execute Raccoon Mario animation script.
                scr_mario_hammer();
            } break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update the palette sprite.

current_pal = wrap(isflashing,0,pal_swap_get_pal_count(pal_sprite)-1);

//If Mario has the small, big or raccoon powerups.
if ((global.powerup == cs_small) || (global.powerup == cs_big) || (global.powerup == cs_raccoon)) {

    pal_sprite = spr_palette;
}

//Otherwise, if Mario has the fire powerup.
else if (global.powerup == cs_fire) {

    pal_sprite = spr_palette_fire;
}

//Otherwise, if Mario has the fire powerup.
else if (global.powerup == cs_frog) {

    pal_sprite = spr_palette_frog;
}

//Otherwise, if Mario has the fire powerup.
else if (global.powerup == cs_tanooki) {

    pal_sprite = spr_palette_tanooki;
}

//Otherwise, if Mario has the fire powerup.
else if (global.powerup == cs_hammer) {

    pal_sprite = spr_palette_hammer;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wraps around if enabled on the level.

if (global.hwrap) { //If room wrapping is enabled on the room.
    
    //If Mario is nearby the right boundary of the room.
    if (x &gt; room_width) {
    
        //Make Mario go to the left boundary of the room.
        x -= room_width;
    }    
    
    //Otherwise, if Mario is nearby the left boundary of the room.
    else if (x &lt; 0) {
    
        //Make Mario go to the right boundary of the room.
        x += room_width;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles Mario's physics and movement.

//Call uninitialized variables
var jumpstr = 3.4675;

//Handle events
event_user(2);

//Kill Mario when below the screen
if (y &gt; room_height+32) {

    instance_create(x,y,obj_mario_dead);
    instance_destroy();
    exit;
}

//Set up Mario's behaviour depending on it's current state.
if (!swimming) { //If Mario is not swimming.
    
    if (state &lt; 3) { //If Mario is not climbing.
    
        //If Mario is not sliding down a slope.
        if (!sliding) {
        
            //Run 'Main' behaviour script.
            event_user(3); 
            
            //Update P-Meter
            if (!global.pwing) {
            
                scr_update_pmeter();
            }
        }
        else {
        
            //Run 'Sliding' behaviour script.        
            event_user(4);
            
            //Get up if Mario is crouched down.
            duck = false;
            
            //Stop doing a barrel roll
            starjump = false;
            
            //Restart P-Meter stuff.
            if (global.pwing == false) {
            
                audio_stop_sound(snd_pmeter);
                flying = false;
                run = false;
                if (pmeter &gt; 0) {
                
                    pmeter -= 1;                
                }
            }  
        }
    }
    else { //If Mario is climbing.
        
        //Run 'Climbing' behaviour script.
        event_user(5);
        
        //Get up if Mario is crouched down.
        duck = false;
        
        //Stop doing a barrel roll
        starjump = false;
        
        //Make Mario able to jump.
        if (jumping == 2) {
        
            jumping = 0;
        }
            
        //Restart P-Meter stuff.
        if (global.pwing == false) {
        
            audio_stop_sound(snd_pmeter);
            flying = false;
            run = false;
            if (pmeter &gt; 0) {
            
                pmeter -= 1;                
            }
        }  
    }
}
else { //If Mario is swimming.

    //Run 'Swimming' behaviour script.
    event_user(6);
    
    //Stop doing a barrel roll
    starjump = false;
            
    //Restart P-Meter stuff.
    if (global.pwing == false) {
    
        audio_stop_sound(snd_pmeter);
        flying = false;
        run = false;
        if (pmeter &gt; 0) {
        
            pmeter -= 1;                
        }
    }   
}

//White block collision
if (depth = 16) {

    if (xscale == 1) {
    
        tile12 = tile_layer_find(12,x,y);
        tile15 = tile_layer_find(15,x,y);
    }
    else if (xscale == -1) {
    
        tile12 = tile_layer_find(12,x,y);
        tile15 = tile_layer_find(15,x,y);
    }
}
else {

    tile12 = -1;
    tile15 = -1;
}

//Conveyor belt collision
scr_update_conveyor();

//Right Wall Collision
if (hspeed &gt; 0) { //If Mario's horizontal speed is greater than 0.

    //If there's a wall on the way.
    if (collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-4,obj_solid,1,0)) { 

        //Stop Mario's horizontal speed.
        hspeed = 0;
        
        //Prevent Mario from getting embed into the wall
        while (collision_rectangle(bbox_right,bbox_top+4,bbox_right,bbox_bottom-1,obj_solid,1,0)) &amp;&amp; (!collision_point(x,bbox_top+4,obj_solid,0,0))
            x--;
    }
}

//Left wall collision
else if (hspeed &lt; 0) { //Otherwise, if Mario's horizontal speed is lower than 0.

    //If there's a wall on the way.
    if (collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-4,obj_solid,1,0)) {

        //Stop Mario's horizontal speed.
        hspeed = 0;
        
        //Prevent Mario from getting embed into the wall
        while (collision_rectangle(bbox_left,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0)) &amp;&amp; (!collision_point(x,bbox_top+4,obj_solid,0,0))
            x++;
    }
}

//Ceiling collision
if (vspeed &lt; 0) {

    //Check for a nearby block and bump it if there's one.
    var block = collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top-1,obj_blockparent,1,1);
    if ((block) &amp;&amp; (bbox_top &lt; block.bbox_bottom+1)) {
    
        //If the block is hidden.
        if (block.hidden) {

            with (block) event_user(0);
        }
        
        //Otherwise, if the block is not hidden.
        else if (block.ready == 0) {
        
            with (block) {
                
                //Hit the block.
                if (ready == 0) {
    
                    //Make it unable to be hit again.
                    ready = 1;
                    
                    //Move it up.
                    vspeed = -3;
                    alarm[0] = 4;
                    
                    //Trigger block events.
                    event_user(0);
                }
            }
        }
    }

    if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_solid,1,0)) { //If Mario is jumping and there's a ceiling on the way...
    
        //Prevent Mario from getting embed on a ceiling.
        if (state &gt; 1) { //If Mario is jumping.
        
            //Move Mario 1 pixel downwards.
            while (collision_rectangle(bbox_left,bbox_top+1,bbox_right,bbox_top+1,obj_solid,1,0))
                y++;
        }
        
        //Stop vertical movement.
        vspeed = 0;
        
        //Play a bumping sound.
        if (state &lt; 3) { //If Mario is not climbing.
        
            //Play a 'Ricochet' sound.
            if (!audio_is_playing(snd_bump)) {
        
                audio_play_sound(snd_bump,0,0);
            }
        }
    }
}

//Fixes a bug that makes Mario get embed on a solid
if (state &lt; 2) { //If Mario is not in the ground and it's not swimming.

    if (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_solidtop,0,1)) {
    
        while (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_solidtop,0,1))
            y--;
    }
}
else if (state = 2) { //Otherwise, if it's doing it.

    //Collision with a sloped ceiling
    while (collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top,obj_islopeparent,1,1))
        y++;
}

//Get up if Mario is crouched down.
if (duck == true) {

    //If Mario is on the ground and the 'Down' key is no longer held.
    if ((infloor) &amp;&amp; (!keyboard_check(vk_down))) {
    
        //Get up
        duck = false;
    }
}

//Make Mario swim.
var water = collision_rectangle(bbox_left,y,bbox_right,y,obj_swim,0,0);
var fakewater = collision_rectangle(bbox_left,y,bbox_right,y,obj_fakeswim,0,0); 

//If Mario is not swimming and makes contact with water.  
if ((!swimming) &amp;&amp; ((water) || (fakewater))) {

    //Create a splash effect.
    if (place_meeting(x,y,water)) {
    
        with (instance_create(x-8,water.y-15,obj_smoke)) {
        
            sprite_index = spr_splash;
        }
    }
    
    //Make Mario swim.
    swimming = true;
    
    //Make Mario stop sliding.
    sliding = false;
    
    //Make Mario get up.
    duck = false;
    
    //Stop horizontal movement.
    hspeed = 0;
    
    //Stop vertical movement.
    gravity = 0;
    if (vspeed &gt; 0)
        vspeed = 0;
}
else if ((swimming) &amp;&amp; ((!water) &amp;&amp; (!fakewater))) { //If Mario is swimming and there's no water above.

    //If there's not water above and there's not a solid on the way out.
    if (!collision_rectangle(bbox_left,y-1,bbox_right,y-1,obj_solid,0,0)) { 
           
        //If Mario is swimming.
        if ((state == 2) &amp;&amp; (vspeed &lt; 0)) { 
        
            //If the player holds the Shift key.
            if (keyboard_check(vk_shift)) { 
            
                //Create a splash effect.
                with (instance_create(obj_mario.x-8,y-14,obj_smoke)) {
                
                    sprite_index = spr_splash;                
                }
                
                //Make Mario able to swim again.
                swimming = false;
                
                //Make Mario able to stop in mid-air.
                jumping = 1;
                
                //Set the vertical speed.
                vspeed = -jumpstr;
                
                //Play a 'jumping' sound.
                audio_play_sound(snd_jump,0,0);                  
            }
            
            //Otherwise, if the 'Shift' key is not held.
            else {
            
                //If Mario is swimming upwards.
                if (vspeed &lt; 0) { 
                
                    //Stop vertical speed.
                    vspeed = 0;                        
                }
            }
        }
    }
}

//Free Mario is he is stuck on a solid.
if (infloor) //If Mario is on the ground and it's not crouched down.
&amp;&amp; (!duck)
&amp;&amp; (!inwall)
&amp;&amp; (mask_index != spr_mask) {

    //Check if Mario is stuck on a solid.
    var stuck = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_solid,1,1);
    if (stuck) {
    
        //If Mario is colliding with a left or right arrow.
        if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_left,0,0))
        &amp;&amp; (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_right,0,0)) {
        
            //If Mario is facing right.
            if (xscale == 1) {
            
                //If Mario's horizontal speed is equal/greater than 0.
                if (hspeed &gt;= 0) {
            
                    //Move mario to safety.
                    inwall = true;
                    
                    //Set the direction to move.
                    direct = -1;
                }
                
                //Otherwise, if Mario's horizontal speed is lower than 0.
                else if (hspeed &lt; 0) {
                
                    //Move mario to safety.
                    inwall = true;
                    
                    //Set the direction to move.
                    direct = 1;                
                }
            }
            
            //Otherwise, if Mario is facing left.
            else if (xscale == -1) {
            
                //If Mario's horizontal speed if equal/lower than 0.
                if (hspeed &lt;= 0) {
            
                    //Move mario to safety.
                    inwall = true;
                    
                    //Set the direction to move.
                    direct = 1;
                }
                
                //Otherwise, if Mario's horizontal speed if greater than 0.
                else if (hspeed &gt; 0) {
                
                    //Move mario to safety.
                    inwall = true;
                    
                    //Set the direction to move.
                    direct = -1;                
                }           
            }
        }
        
        //Otherwise, if Mario is overlapping an left arrow.
        else if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_left,0,0)) {
        
            //Move mario to safety.
            inwall = true;
            
            //Set the direction to move.
            direct = -1;              
        }
        
        //Otherwise, if Mario is overlapping an right arrow.
        else if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_right,0,0)) {
        
            //Move mario to safety.
            inwall = true;
            
            //Set the direction to move.
            direct = 1;              
        }
    }
}

//Otherwise, if Mario gets stuck on a wall.
else if (inwall) {

    //Move Mario to safety
    x += 1*sign(direct);
    
    //If Mario is not longer stuck, make him able to move.
    if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_solid,0,0)) {
    
        inwall = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_platformparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Platform Collision

//If there's a platform nearby and Mario's vertical speed is greater than 0.
if ((bbox_bottom &lt; other.bbox_top+5) &amp;&amp; (vspeed &gt;= 0)) {

    //Snap to position.
    y = other.bbox_top-16;
    
    //Stop vertical speed.
    vspeed = 0;
    gravity = 0;
    
    //Update animation state
    if (state == 2) { //If Mario is jumping.
    
        //If Mario's horizontal speed is equal to 0.
        if (hspeed == 0) {
        
            //Set the 'Idle' animation state.
            state = 0;
        }
        else {
        
            //If Mario does have the Frog powerup.
            if (global.powerup == cs_frog) {
            
                //If Mario is swimming.
                if (swimming == true) {
                
                    if (!holding) {
                    
                        //Set the 'Jump / Swim' animation state.
                        state = 2;
                    }
                    else {
                    
                        //Set the 'Walk' animation phase.
                        state = 1;
                    }
                }
                else {
                
                    //Set the 'Walk' animation state.
                    state = 1;
                }
            }
            else {
            
                //Set the 'Walk' animation state.
                state = 1;
            }
        }
    }
    
    //Allow Mario to jump again.
    if (jumping != 0)
    jumping = 0;
    
    //Reset Mario star jump.
    starjump = false;
    
    //Reset combo counter, deny if Mario is sliding down a slope.
    if (!sliding) {
    
        hitcombo = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_slopeparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slope Collision

if (vspeed &gt;= 0) { //If Mario's vertical speed is equal/greater than 0.
    
    //Stop vertical speed.
    vspeed = 0;
    gravity = 0;
    
    //Update animation state
    if (state == 2) { //If Mario is jumping.
    
        //If Mario's horizontal speed is equal to 0.
        if (hspeed == 0) {
        
            //Set the 'Idle' animation state.
            state = 0;
        }
        else {
        
            //If Mario does have the Frog powerup.
            if (global.powerup == cs_frog) {
            
                //If Mario is swimming.
                if (swimming == true) {
                
                    if (!holding) {
                    
                        //Set the 'Jump / Swim' animation state.
                        state = 2;
                    }
                    else {
                    
                        //Set the 'Walk' animation phase.
                        state = 1;
                    }
                }
                else {
                
                    //Set the 'Walk' animation state.
                    state = 1;
                }
            }
            else {
            
                //Set the 'Walk' animation state.
                state = 1;
            }
        }
    }
    
    //Allow Mario to jump again.
    if (jumping != 0)
    jumping = 0;
    
    //Reset Mario star jump.
    starjump = false;
    
    //Reset combo counter, deny if Mario is sliding down a slope.
    if (!sliding) {
            
        hitcombo = 0;
    }
}

//Stay embed on the slope.
while (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom-2,obj_slopeparent,1,1))
    y--;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solidtop">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Solidtop Collision

//If there's a platform nearby and Mario's vertical speed is greater than 0.
if ((bbox_bottom &lt; other.yprevious+5) &amp;&amp; (vspeed &gt;= 0)) {

    //Snap to position.
    y = other.yprevious-16;
    
    //Stop vertical speed.
    vspeed = 0;
    gravity = 0;
    
    //Update animation state
    if (state == 2) { //If Mario is jumping.
    
        //If Mario's horizontal speed is equal to 0.
        if (hspeed == 0) {
        
            //Set the 'Idle' animation state.
            state = 0;
        }
        else {
        
            //If Mario does have the Frog powerup.
            if (global.powerup == cs_frog) {
            
                //If Mario is swimming.
                if (swimming == true) {
                
                    if (!holding) {
                    
                        //Set the 'Jump / Swim' animation state.
                        state = 2;
                    }
                    else {
                    
                        //Set the 'Walk' animation phase.
                        state = 1;
                    }
                }
                else {
                
                    //Set the 'Walk' animation state.
                    state = 1;
                }
            }
            else {
            
                //Set the 'Walk' animation state.
                state = 1;
            }
        }
    }
    
    //Allow Mario to jump again.
    if (jumping != 0)
    jumping = 0;
    
    //Reset Mario star jump.
    starjump = false;
    
    //Reset combo counter, deny if Mario is sliding down a slope.
    if (!sliding) {
    
        hitcombo = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario crouch down.

//If Mario is on the ground.
if (infloor) {

    //Exit the event if Mario has the Frog powerup or is holding something or is sliding down a slope.
    if (global.powerup == cs_frog)
    || (global.kuriboshoe)
    || (disablecontrol)
    || (holding)
    || (sliding)
    exit;
    
    //Make Mario crouch down.
    if (!duck) {
    
        //Stop 'skid' sound
        audio_stop_sound(snd_skid);
        
        //Crouch down if Mario is not small.
        if (global.powerup != cs_small) {
        
            duck = true;
        } 
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario climb

//Check if there's a climbable surface and make Mario climb if there's one.
if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_climb,1,0)) {

    //If Mario is not sliding, swimming, holding something or wearing a kuribo shoe.
    if (sliding == false)
    &amp;&amp; (holding == false)
    &amp;&amp; (swimming == false)
    &amp;&amp; (global.kuriboshoe == false) {
    
        //If Mario is not climbing.
        if (state &lt; 3) {
        
            //Stop moving
            speed = 0;
            gravity = 0;
            
            //Set the climbing state
            state = 3;
        }
    }
    else { //Otherwise, exit the event.
    
        exit;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slope / Platform bug fix.

if (place_meeting(x,y+4,obj_slopeparent)) 
|| (place_meeting(x,y+1,obj_platformparent)) {
    
    //Move 4 pixels upwards.
    y -= 4; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario kick something

kicking = true;

//End kicking
alarm[7] = 8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario's swim behaviour script.

//Call uninitialized variables
var hspeedmax = 1;
var jumpstr = 3.4675;
var acc = 0.025;
var accskid = 0.05;
var dec = 0.007;
var grav = 0.03;

//If Mario is wearing a kuribo shoe.
if (global.kuriboshoe) {

    //Play a 'powerdown' sound.
    audio_play_sound(snd_powerlost,0,false);
    
    //Create a effect
    ID = instance_create(x,y-16,obj_powerup_lost);
    with (ID) {
    
        sprite_index = spr_kuriboshoe_lose;
        image_xscale = other.xscale;
    }
    
    //Make Mario blink
    alarm[0] = 90;
    alarm[1] = 1;
    
    //Make Mario invulnerable
    invulnerable = true;
    
    //End kuribo shoe mode
    global.kuriboshoe = false;
    
    //Destroy the shoe
    with (obj_kuriboshoe_ride) instance_destroy();     
}

//Make Mario unduck if jumping.
if (state == 2) {

    duck = false;
}

//Prevent Mario from falling too fast.
if (vspeed &gt;= 4) {

    vspeed = 4;
}

//Handle Movement
if ((global.powerup != cs_frog) || ((global.powerup == cs_frog) &amp;&amp; (holding))) {

    //Prevent Mario from swimming too fast.
    if (vspeed &lt; -2) {
    
        vspeed = -2;
    }
    
    //Set up the maximum horizontal speed.
    if (state == 2) {
    
        hspeedmax = 2;
    }
    else {
    
        hspeedmax = 0.5;
    }
    
    //Handle Mario movement.
    if (!disablecontrol) &amp;&amp; (!inwall) { //If Mario's controls are not disabled.
    
        //If the player presses the 'Shift' key.
        if (keyboard_check_pressed(vk_shift)) {
        
            //If Mario is crouched down.
            if (duck) {
            
                //If there's a solid above Mario.
                if (!place_meeting(x,y-8,obj_solid))
                &amp;&amp; (!place_meeting(x,y-8,obj_platformparent)) {
                    
                    //Play a swim sound.
                    audio_play_sound(snd_swim,0,0);
                    
                    //Move Mario a few pixels upwards when on contact with a moving platform or a slope.
                    event_user(15);
                    
                    //Set the vertical speed.
                    vspeed -= 1.5;
                }
                
                //Otherwise, deny this event.
                else {
                
                    //Exit the event.
                    exit;
                }
            }
            else {
        
                //Play a swim sound.
                audio_play_sound(snd_swim,0,0);
                
                //Move Mario a few pixels upwards when on contact with a moving platform or a slope.
                event_user(15);
                
                //Set the vertical speed.
                vspeed -= 1.5;
            }
        }
        
        //Handle horizontal movement.
        //If the player presses the 'Right' key and the 'Left' key is not held.
        if ((keyboard_check(vk_right)) &amp;&amp; (!duck) &amp;&amp; (!keyboard_check(vk_left))) {
        
            //Set up the facing direction and make mario turn if it's holding something.
            if ((xscale != 1) &amp;&amp; (holding)) {
            
                turning = 1;
                alarm[6] = 8;
            }
            xscale = 1;
            
            //Set the horizontal speed.
            if (hspeed &gt;= 0) { //If Mario's horizontal speed is equal/greater than 0.
            
                hspeed += acc;
            }
            else { //Otherwise, If Mario's horizontal speed is lower than 0.
            
                hspeed += acc*2;
            }
        }
        
        //If the player presses the 'Left' key and the 'Right' key is not held.
        else if ((keyboard_check(vk_left)) &amp;&amp; (!duck) &amp;&amp; (!keyboard_check(vk_right))) {
        
            //Set up the facing direction and make mario turn if it's holding something.
            if ((xscale != -1) &amp;&amp; (holding)) {
            
                turning = 1;
                alarm[6] = 8;
            }
            xscale = -1;
            
            //Set the horizontal speed.
            if (hspeed &lt;= 0) { //If Mario's horizontal speed is equal/lower than 0.
            
                hspeed += -acc;
            }
            else { //Otherwise, If Mario's horizontal speed is greater than 0.
            
                hspeed += -acc*2;
            }            
        }
        
        //Otherwise, if neither of the 'Left' key or 'Right' key is not held.
        else if (infloor) { //If Mario is on the ground.
        
            //Reduce Mario's speed until he stops.
            hspeed = max(0,abs(hspeed)-dec)*sign(hspeed);
            
            //Set up horizontal speed to 0 when hspeed hits the value given on 'dec'.
            if ((hspeed &lt; dec) &amp;&amp; (hspeed &gt; -dec)) {
            
                hspeed = 0;
            }        
        }
    }
    
    //Otherwise, If Mario's controls are disabled.
    else if (disablecontrol) {
    
        //Reduce Mario's speed until he stops.
        hspeed = max(0,abs(hspeed)-dec)*sign(hspeed);
        
        //Set up horizontal speed to 0 when hspeed hits the value given on 'dec'.
        if ((hspeed &lt; dec) &amp;&amp; (hspeed &gt; -dec)) {
        
            hspeed = 0;
        }           
    }
    
    //Prevent Mario from sliding too fast.
    if (abs(hspeed) &gt; hspeedmax) {
    
        hspeed = max(0,abs(hspeedmax)-dec*2)*sign(hspeed);
    }
        
    //Floor Collision.
    if ((collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+2,obj_solidtop,0,0)) &amp;&amp; (!vspeed &lt; 0))
    || ((collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+2,obj_platformparent,0,0)) &amp;&amp; (!vspeed &lt; 0)) {
    
        //Stop vertical speed.
        vspeed = 0
        gravity = 0;
    }
    
    //Apply gravity.
    else if (state == 2) {
    
        gravity = grav;
    }
}

//Otherwise, if Mario is wearing the Frog Suit
else if (global.powerup == cs_frog) {

    //Set the gravity.
    gravity = 0
    
    //Make Mario swim faster.
    if (keyboard_check(vk_control)) {
    
        //Set the maximum horizontal speed.
        hspeedmax = 2.7;
    }
    else {
    
        //Set the maximum horizontal speed.
        hspeedmax = 1.3;
    }
    
    if (!disablecontrol) { //If Mario's controls are not disabled.
    
        //If the player presses the 'Right' key and the 'Left' key is not held.
        if ((keyboard_check(vk_right)) &amp;&amp; (!keyboard_check(vk_left))) {
        
            //Set the horizontal speed.
            hspeed += 0.5;
            
            //Set the facing direction.
            xscale = 1;
            
            //Sets the animation.
            swimdir = 0;
        }
        
        //Otherwise, if the player presses the 'Left' key and the 'Right' key is not held.
        else if ((keyboard_check(vk_left)) &amp;&amp; (!keyboard_check(vk_right))) {
        
            //Set the horizontal speed.
            hspeed += -0.5;
            
            //Set the facing direction.
            xscale = -1;
            
            //Sets the animation.
            swimdir = 0;
        }
        
        //Otherwise, if neither of the 'Left' key or 'Right' key is not held.
        else        
            hspeed = 0;
        
        //If the player presses the 'Up' key and the 'Down' key is not held.
        if ((keyboard_check(vk_up)) &amp;&amp; (!keyboard_check(vk_down))) {
        
            //Set the vertical speed.
            vspeed += -0.5;
            
            //Set the animation.
            swimdir = 1;
        }
        
        //Otherwise, if the player presses the 'Down' key and the 'Up' key is not held.
        else if ((keyboard_check(vk_down)) &amp;&amp; (!keyboard_check(vk_up))) {
        
            //Set the animation.
            swimdir = 2;
            
            //Set the vertical speed.
            if (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_solidtop,0,0))
            || (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+3,obj_slopeparent,1,0)) 
            || (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_platformparent,0,0)) {
            
                //Stop right there.
                vspeed = 0;
            }
            else {
            
                //Set the vertical speeed.
                vspeed += 0.5;
            }
        }
        
        //Otherwise, if neither of the 'Up' key or 'Down' key is not held.
        else {
        
            //Stop right there.
            vspeed = 0;
        }
        
        //Prevent Mario from swimming too fast.
        if (speed &gt; hspeedmax)
            speed = hspeedmax;
    }
    
    //Otherwise, stop him.
    else {
    
        speed = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario's climb behaviour script.

//Call uninitialized variables
var jumpstr = 3.4675;

//Cap horizontal speed
if (hspeed &gt; 1)
hspeed = 1;
if (hspeed &lt; -1)
hspeed = -1;

//Cap vertical speed
if (vspeed &gt; 1)
vspeed = 1;
if (vspeed &lt; -1)
vspeed = -1;

//Handle climbing
if (!disablecontrol) { //If Mario's controls are not disabled.

    //If the 'Right' key is held and the 'Left' key is not held.
    if (keyboard_check(vk_right)) &amp;&amp; (!keyboard_check(vk_left)) {
    
        //Set the horizontal speed.
        hspeed += 0.15;
        
        //Set the facing direction.
        xscale = 1;
    }
    
    //Otherwise, if the 'Left' key is held and the 'Right' key not.
    else if (keyboard_check(vk_left)) &amp;&amp; (!keyboard_check(vk_right)) {
    
        //Set the horizontal speed.
        hspeed += -0.15;
        
        //Set the facing direction.
        xscale = -1;
    }
    
    //Otherwise, if neither of the 'Left' or 'Right' keys are being held.
    else {
    
        hspeed = 0;
    }
    
    //If the 'Up' key is held and the 'Down' key is not held.
    if ((keyboard_check(vk_up)) &amp;&amp; (!keyboard_check(vk_down))) {
    
        //If there's not a climbable surface above Mario.
        if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_climb,0,0)) {
        
            //Stop vertical speed
            vspeed = 0;
        }
        else { //Otherwise, allow him to climb.
        
            //Set the vertical speed.
            vspeed += -0.15;
        }
    }
    
    //If the 'Down' key is held and the 'Up' key not.
    else if ((keyboard_check(vk_down)) &amp;&amp; (!keyboard_check(vk_up))) {
    
        //Set the vertical speed.
        vspeed += 0.15;
        
        //Check for a nearby floor and stop climbing if there's one.
        var ground1 = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_solidtop,0,0);
        var ground2 = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_platformparent,0,0);
        if ((ground1) || (ground2)) {
        
            //Set the jumping state.
            state = 2;
        }
    }
    
    //Otherwise, if neither of the 'Up' or 'Down' keys are being held.
    else {
    
        vspeed = 0;
    }
    
    //Make Mario able to jump.
    if (keyboard_check_pressed(vk_shift)) { //If the 'Shift' key is pressed and Mario is not jumping.
    
        //Play 'Jump' sound.
        audio_play_sound(snd_jump,0,false);
        
        //Make the player able to vary the jump.
        jumping = 1;
        
        //Set the jumping state.
        state = 2;
        
        //Set the vertical speed.
        vspeed = -jumpstr+abs(hspeed)/7.5*-1;               
    }
}

//Check if there's a not climbable surface overlapping Mario.
if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_climb,0,0)) {

    state = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario's slide behaviour script.

//Call uninitialized variables
var hspeedmax = 2.7;
var jumpstr = 3.4675;
var grav = 0.3625

//Prevent Mario from falling too fast.
if (vspeed &gt; 4) {

    vspeed = 4;
}

//Frog and Hammer Mario can't slide down slopes, so make him stop.
if (global.powerup == cs_frog) {

    //Stop sliding.
    sliding = false;
}

//Make Mario able to jump.
if (!disablecontrol) { //If Mario's controls are not disabled.
    
    //If the player presses the 'Shift' key and Mario is sliding down a slope.
    if (keyboard_check_pressed(vk_shift)) 
    &amp;&amp; (jumping == 0)
    &amp;&amp; (infloor) {
    
        //Play 'Jump' sound.
        audio_play_sound(snd_jump,0,false);
        
        //Make the player able to vary the jump.
        jumping = 1;
        
        //Set the jumping state.
        sliding = 0;
        
        //Set the vertical speed.
        vspeed = -jumpstr+abs(hspeed)/7.5*-1;      
    }
}

//Make Mario accelerate when sliding down a slope.
if (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_slopeparent,1,0)) {

    //22.5º Right Slope
    if (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_slope_r,1,0)) {
    
        hspeed += -0.1;
    }
    
    //22.5º Left Slope
    else if (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_slope_l,1,0)) {
    
        hspeed += 0.1;
    }
    
    //45º Right Slope
    else if (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_slope_sr,1,0)) {
    
        hspeed += -0.15;
    }
    
    //45º Left Slope
    else if (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_slope_sl,1,0)) {
    
        hspeed += 0.15;
    }
}

//Make Mario decelerate when not sliding down a slope.
else if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_slopeparent,1,0)) {

    //If Mario is on contact with the floor.
    if (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+2,obj_solidtop,0,0)) 
    || (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+2,obj_platformparent,0,0)) {
    
        //If Mario is not on contact with a slippery surface.
        if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_slippery,0,0)) {
        
            //Slowdown
            hspeed = max(0,abs(hspeed)-0.05)*sign(hspeed);
            if ((hspeed &gt; -0.05) &amp;&amp; (hspeed &lt; 0.05)) {
            
                //Stop horizontal speed.
                hspeed = 0;
                
                //Stop sliding behaviour
                sliding = false;
            }
        }
        
        //Otherwise, if Mario is on contact with a slippery surface.
        else if (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_slippery,0,0)) {
        
            //Slowdown
            hspeed = max(0,abs(hspeed)-0.0125)*sign(hspeed);
            if ((hspeed &gt; -0.0125) &amp;&amp; (hspeed &lt; 0.0125)) {
            
                //Stop horizontal speed.
                hspeed = 0;
                
                //Stop sliding behaviour
                sliding = false;
            }        
        }
    }
}

//Prevent Mario from sliding too fast.
if (abs(hspeed) &gt; hspeedmax) {

    hspeed = max(0,abs(hspeedmax)-0.07*2)*sign(hspeed);
}
    
//Floor Collision.
if ((collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,0)) &amp;&amp; (!vspeed &lt; 0))
|| ((collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_platformparent,0,0)) &amp;&amp; (!vspeed &lt; 0)) {

    //Stop vertical speed.
    vspeed = 0
    gravity = 0;
}

//Apply gravity.
else if (state == 2) {

    gravity = grav;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario's main behaviour script.

//Call uninitialized variables
var hspeedmax = 1.35;
var jumpstr = 3.4675;
var acc = 0.05;
var accfrog = 0.13;
var accskid = 0.15;
var dec = 0.0375;
var decskid = 0.072;
var grav = 0.3625
var grav_alt = 0.0625;

//Prevent Mario from falling too fast.
if (vspeed &gt;= 4)
vspeed = 4;
    
//Set up Mario's maximum horizontal speed.
if (!flying) { //If Mario is not flying with the raccoon or tanooki powerups.

    if (keyboard_check(vk_control)) { //If the control key is being held.
    
        if (global.powerup == cs_frog) { //If Mario has the frog suit.
        
            if ((holding) || (global.kuriboshoe)) { //If Mario is holding something or it's wearing a kuribo shoe.
            
                if (run) { //If the PMeter is filled up.
                
                    //Set up Mario's maximum horizontal speed.
                    hspeedmax = 3.5;
                }
                else { //If the PMeter is not filled up.
                
                    //Set up Mario's maximum horizontal speed.
                    hspeedmax = 2.75;
                }
            }
            else {
            
                //Set up Mario's maximum horizontal speed.
                hspeedmax = 1.5;
            }
        }
        else { //If Mario does not have the frog suit.
        
            if (run) { //If the PMeter is filled up.
            
                //Set up Mario's maximum horizontal speed.
                hspeedmax = 3.5;
            }
            else { //If the PMeter is not filled up.
            
                //Set up Mario's maximum horizontal speed.
                hspeedmax = 2.75;
            }                    
        }    
    }
    else if (infloor) { //Do not reduce speed until Mario makes contact with the ground.
    
        //Set up Mario's maximum horizontal speed.
        hspeedmax = 1.5;
    }
}
else { //Otherwise, if Mario is flying.

    //Set up Mario's maximum horizontal speed.
    if (hspeedmax &gt; 2) {
    
        hspeedmax -= 0.05;
    }
}
//Handle basic movements
if ((!disablecontrol) &amp;&amp; (!inwall)) { //If Mario's controls are not disabled.

    //Make Mario able to jump when is on contact with the ground.
    if ((keyboard_check_pressed(vk_shift)) &amp;&amp; (scr_can_jump())) { //If the 'Shift' key is pressed and Mario is not jumping and the controls are not disabled.
    
        //Play 'Jump' sound.
        audio_play_sound(snd_jump,0,false);
        
        //Make the player able to vary the jump.
        jumping = 1;
        
        //Move Mario a few pixels upwards when on contact with a moving platform or a slope.
        event_user(15);
        
        //Make Mario perform a special jump
        if (instance_exists(obj_invincibility)) {
        
            if (!run) {
            
                starjump = true;
            }
        }
        
        //Set the vertical speed.
        vspeed = -jumpstr+abs(hspeed)/7.5*-1;
    }
    
    //Make Mario fall if the player releases the 'Shift' key.
    else if ((jumping == 1) &amp;&amp; (keyboard_check_released(vk_shift))) { 
        
        jumping = 2;
    }
    
    //Enable / Disable Movement.
    scr_enable_disable_movement();
    
    //Handle Horizontal Movement.
    //If the player holds the 'Right' key and the 'Left' key is not being held.
    if ((keyboard_check(vk_right)) &amp;&amp; (move) &amp;&amp; (!keyboard_check(vk_left))) {
    
        //Set up the facing direction and make mario turn if it's holding something.
        if ((xscale != 1) &amp;&amp; (holding)) {
        
            turning = 1;
            alarm[6] = 4;
        }
        xscale = 1;
        if ((global.kuriboshoe) &amp;&amp; (infloor)) {
        
            if (!place_meeting(x,y+1,obj_noteblock)) {
            
                if (vspeed == 0) {
                
                    vspeed = -1.8;
                    if (place_meeting(x,y+2,obj_platformparent))
                        y -= 3;
                }
            }
        }
        
        //Make Mario move horizontally.
        if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_slippery,0,0)) { //If Mario is overlapping a slippery surface.
        
            //If Mario does not have the Frog powerup.
            if (global.powerup != cs_frog) {
            
                //If Mario's horizontal speed is equal/greater than 0.
                if (hspeed &gt;= 0) {
                
                    //If Mario is overlapping a slope.
                    if (place_meeting(x,y+1,obj_slope_r))
                    || (place_meeting(x,y+1,obj_slope_sr)) {
                    
                        hspeed += acc/2;
                        if (hspeed &gt; 0.675)
                            hspeed -= 0.1;
                    }
                    else {
                    
                        //Add 'acc' to hspeed.
                        hspeed += acc;
                    }
                }
                else { //Otherwise, if Mario's speed is lower than 0.
                
                    //Add 'accskid' to hspeed;
                    hspeed += accskid;
                }
            }
            else { //If Mario does have the Frog powerup.
            
                //If Mario is holding something or it's wearing a kuribo shoe.
                if ((holding &gt; 0) || (global.kuriboshoe)) {
                
                    //If Mario's horizontal speed is equal/greater than 0.
                    if (hspeed &gt;= 0) {
                    
                        //If Mario is overlapping a slope.
                        if (place_meeting(x,y+1,obj_slope_r))
                        || (place_meeting(x,y+1,obj_slope_sr)) {
                        
                            hspeed += acc/2;
                            if (hspeed &gt; 0.675)
                                hspeed -= 0.1;
                        }
                        else {
                        
                            //Add 'acc' to hspeed.
                            hspeed += acc;
                        }
                    }
                    else { //Otherwise, if Mario's speed is lower than 0.
                    
                        //Add 'accskid' to hspeed.
                        hspeed += accskid;
                    }                         
                }
                else { //Otherwise, set up default frog speed.
                
                    //Add 'accfrog' to hspeed.
                    hspeed += accfrog;
                }
            }
        }
        else { //Otherwise, if Mario is overlapping a slippery surface.
        
            //If Mario's horizontal speed is equal/greater than 0.
            if (hspeed &gt;= 0) {
            
                //Add 'acc' to hspeed
                hspeed += acc/1.5;
            }
            else { //Otherwise, if Mario's speed is lower than 0.
            
                //Add 'accskid' to hspeed.
                hspeed += accskid/1.5;
            }                                              
        }
    }
    
    //If the player holds the 'Left' key and the 'Right' key is not being held.
    else if ((keyboard_check(vk_left)) &amp;&amp; (move) &amp;&amp; (!keyboard_check(vk_right))) {
    
        //Set up the facing direction and make mario turn if it's holding something.
        if ((xscale != -1) &amp;&amp; (holding)) {
        
            turning = 1;
            alarm[6] = 4;
        }
        xscale = -1;
        if ((global.kuriboshoe) &amp;&amp; (infloor)) {
        
            if (!place_meeting(x,y+1,obj_noteblock)) {
            
                if (vspeed == 0) {
                
                    vspeed = -1.8;
                    if (place_meeting(x,y+2,obj_platformparent))
                        y -= 3;
                }
            }
        }
        
        //Make Mario move horizontally.
        if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_slippery,0,0)) { //If Mario is overlapping a slippery surface.
        
            //If Mario does not have the Frog powerup.
            if (global.powerup != cs_frog) {
            
                //If Mario's horizontal speed is equal/lower than 0.
                if (hspeed &lt;= 0) {
                
                    //If Mario is overlapping a slope.
                    if (place_meeting(x,y+1,obj_slope_l))
                    || (place_meeting(x,y+1,obj_slope_sl)) {
                    
                        hspeed += -acc/2;
                        if (hspeed &lt; -0.675)
                            hspeed += 0.1;
                    }
                    else {
                    
                        //Add 'acc' to hspeed.
                        hspeed += -acc;
                    }
                }
                else { //Otherwise, if Mario's speed is greater than 0.
                
                    //Add 'accskid' to hspeed;
                    hspeed += -accskid;
                }
            }
            else { //If Mario does have the Frog powerup.
            
                //If Mario is holding something or it's wearing a kuribo shoe.
                if ((holding &gt; 0) || (global.kuriboshoe)) {
                
                    //If Mario's horizontal speed is equal/lower than 0.
                    if (hspeed &lt;= 0) {
                    
                        //If Mario is overlapping a slope.
                        if (place_meeting(x,y+1,obj_slope_l))
                        || (place_meeting(x,y+1,obj_slope_sl)) {
                        
                            hspeed += -acc/2;
                            if (hspeed &lt; -0.675)
                                hspeed -= -0.1;
                        }
                        else {
                        
                            //Add 'acc' to hspeed.
                            hspeed += -acc;
                        }
                    }
                    else { //Otherwise, if Mario's speed is greater than 0.
                    
                        //Add 'accskid' to hspeed.
                        hspeed += -accskid;
                    }                         
                }
                else { //Otherwise, set up default frog speed.
                
                    //Add 'accfrog' to hspeed.
                    hspeed += -accfrog;
                }
            }
        }
        else { //Otherwise, if Mario is overlapping a slippery surface.
        
            //If Mario's horizontal speed is equal/lower than 0.
            if (hspeed &lt;= 0) {
            
                //Add 'acc' to hspeed
                hspeed += -acc/1.5;
            }
            else { //Otherwise, if Mario's speed is greater than 0.
            
                //Add 'accskid' to hspeed.
                hspeed += -accskid/1.5;
            }                                              
        }
    }
    else if (infloor) { //If Mario is on contact with the ground.
    
        //If Mario is not overlapping a slippery surface.
        if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_slippery,0,0)) {
        
            //If Mario is not crouched down.
            if (!duck) {
            
                //Reduce Mario's speed until he stops.
                hspeed = max(0,abs(hspeed)-dec)*sign(hspeed);
                
                //Set up horizontal speed to 0 when hspeed hits the value given on 'dec'.
                if ((hspeed &lt; dec) &amp;&amp; (hspeed &gt; -dec)) {
                
                    hspeed = 0;
                }
            }
            else { //If Mario is crouched down.
            
                //Reduce Mario's speed until he stops.
                hspeed = max(0,abs(hspeed)-dec)*sign(hspeed);
                
                //Set up horizontal speed to 0 when hspeed hits the value given on 'dec'.
                if ((hspeed &lt; decskid) &amp;&amp; (hspeed &gt; -decskid)) {
                
                    hspeed = 0;
                }
            }
        }
        else { //Otherwise, if Mario is overlapping a slippery surface.
        
            //Reduce Mario's speed until he stops.
            hspeed = max(0,abs(hspeed)-dec/8)*sign(hspeed);
            
            //Set up horizontal speed to 0 when hspeed hits the value given on 'dec'.
            if ((hspeed &lt; dec/8) &amp;&amp; (hspeed &gt; -dec/8)) {
            
                hspeed = 0;
            }
        }
    }
    
    //Prevent Mario from running too fast.
    if (abs(hspeed) &gt; hspeedmax)
        hspeed = max(0,abs(hspeedmax)-dec*2)*sign(hspeed);
}
else if (infloor) { //Otherwise, if Mario's controls are disabled and Mario is on contact with the ground.
        
    //If Mario is not overlapping a slippery surface.
    if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_slippery,0,0)) {
    
        //If Mario is not crouched down.
        if (!duck) {
        
            //Reduce Mario's speed until he stops.
            hspeed = max(0,abs(hspeed)-dec)*sign(hspeed);
            
            //Set up horizontal speed to 0 when hspeed hits the value given on 'dec'.
            if ((hspeed &lt; dec) &amp;&amp; (hspeed &gt; -dec)) {
            
                hspeed = 0;
            }
        }
        else { //If Mario is crouched down.
        
            //Reduce Mario's speed until he stops.
            hspeed = max(0,abs(hspeed)-dec)*sign(hspeed);
            
            //Set up horizontal speed to 0 when hspeed hits the value given on 'dec'.
            if ((hspeed &lt; decskid) &amp;&amp; (hspeed &gt; -decskid)) {
            
                hspeed = 0;
            }
        }
    }
    else { //Otherwise, if Mario is overlapping a slippery surface.
    
        //Reduce Mario's speed until he stops.
        hspeed = max(0,abs(hspeed)-dec/8)*sign(hspeed);
        
        //Set up horizontal speed to 0 when hspeed hits the value given on 'dec'.
        if ((hspeed &lt; dec/8) &amp;&amp; (hspeed &gt; -dec/8)) {
        
            hspeed = 0;
        }
    }
}

//Floor Collision
if ((collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,0)) &amp;&amp; (!vspeed &lt; 0))
|| ((collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_slopeparent,1,0)) &amp;&amp; (!vspeed &lt; 0))
|| ((collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_platformparent,0,0)) &amp;&amp; (!vspeed &lt; 0)) {

    //Stop vertical speed.
    vspeed = 0
    gravity = 0;
}
//Apply gravity.
else if (state == 2) { //If Mario is jumping/falling.

    //Set up the gravity.
    gravity = grav;
    
    //If Mario is jumping.
    if ((vspeed &lt;= -2) &amp;&amp; (jumping == 1)) {
    
        //Set up alternative gravity.
        gravity = grav_alt;
    }
    
    //If Mario is using the raccoon or the tanooki powerup.
    if ((global.powerup == cs_raccoon) || (global.powerup == cs_tanooki)) {
    
        //If gravity is disabled.
        if (disablegrav &gt; 0) {
        
            //Deny gravity.
            gravity = 0;
            
            //Activate gravity
            disablegrav--;
        }
    }
    else {
    
        //Activate gravity.
        disablegrav = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle events

//Call uninitialized variables
var jumpstr = 3.4675;

//Decrement delay
if (delay &gt; 0)
    delay--;

//Prevent Mario from going too high.
if (y &lt; view_yview[0]-48) {

    y = view_yview[0]-48;
}

//Make mario jump out from the kuribo shoe.
if (global.kuriboshoe) {

    if ((keyboard_check(vk_up)) &amp;&amp; (keyboard_check_pressed(vk_shift))) {
    
        //End kuribo shoe mode
        global.kuriboshoe = false;
    
        //Turn the shoe into a wearable shoe.
        with (obj_kuriboshoe_ride) {
        
            event_user(0);
        }
        
        //Prevent Mario from grabbing a shoe.
        delay = 20;
        
        //Play 'Jump' sound.
        audio_play_sound(snd_jump,0,false);
        
        //Make the player able to vary the jump.
        jumping = 1;
        
        //Move Mario a few pixels upwards when on contact with a moving platform or a slope.
        event_user(15);
        
        //Set the vertical speed.
        vspeed = -jumpstr+abs(hspeed)/7.5*-1;        
    }
}

//P-Wing
if (global.pwing) {

    //Allow infinite flight.
    if (!pmeterready) {
    
        pmeterready = true;
        if (!audio_is_playing(snd_pmeter))
            audio_play_sound(snd_pmeter,0,1);
    }
    
    //Increment pmeter
    pmeter = 113;
    
    //Check state
    if (state == 2)
        flying = true;
    else
        flying = false;
        
    //End if Mario does not have the raccoon / tanooki powerup.
    if ((global.powerup != cs_raccoon) &amp;&amp; (global.powerup != cs_tanooki))
        global.pwing = false;
}

//Set up the animation state for Mario.
if (state &lt; 3) { //If Mario is not climbing.

    //If Mario is on contact with the ground.
    if (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_solidtop,0,0))
    || (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+3,obj_slopeparent,1,0)) 
    || (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+3,obj_platformparent,1,0)) {
    
        if (vspeed == 0) { //If Mario's vertical speed is equal to 0.
        
            if (hspeed == 0) {
            
                //Set up 'Idle' animation state.
                state = 0; 
            }
            else {
            
                //If Mario does have the Frog powerup.
                if (global.powerup == cs_frog) {
                
                    if (swimming) { //If Mario is swimming.
                    
                        if (!holding) {
                        
                            //Set up 'Jump / Swim' animation state.
                            state = 2;
                        }
                        else {
                        
                            //Set up 'Walk' animation state.
                            state = 1;                        
                        }
                    }
                    else { //If Mario is not swimming.
                    
                        //Set up 'Walk' animation state.
                        state = 1;
                    }
                }
                else if (global.powerup != cs_frog) { //If Mario does not have the 'Frog' powerup.
                
                    //Set up 'Walk' animation state.
                    state = 1;
                }
            }
        }
        else if (abs(vspeed &gt; 0.1)) { //Otherwise, if Mario's vertical speed is different than 0.
        
            //Set up 'Jump' animation state.
            state = 2;
        }
    }
    else { //If Mario is not in contact with the ground.
    
        //Set up 'Jump' state.
        state = 2;
    }
}

//Handle slope collisions
if (vspeed &gt;= 0) {

    //45º Right Slope
    if (collision_rectangle(x,bbox_bottom,bbox_right,bbox_bottom+4,obj_slope_sr,1,0)) { 
    
        //If Mario's horizontal speed is lower than 0.
        if (hspeed &lt; 0) { 
    
            //Move 4 pixels downwards as many horizontal speed Mario has to ensure correct slope collision.
            if (!place_meeting(x,bbox_bottom+4,obj_solidtop))
                y += 4 //abs(hspeed);
            else
                y += abs(hspeed);
        }
    }
    
    //45º Left Slope
    else if (collision_rectangle(bbox_left,bbox_bottom,x,bbox_bottom+4,obj_slope_sl,1,0)) { 
    
        //If Mario's horizontal speed is greater than 0.
        if (hspeed &gt; 0) { 
    
            //Move 4 pixels downwards as many horizontal speed Mario has to ensure correct slope collision.
            if (!place_meeting(x,bbox_bottom+4,obj_solidtop))
                y += 4 //abs(hspeed);
            else
                y += abs(hspeed);
        }
    }
    
    //22.5º Right Slope
    else if (collision_rectangle(x,bbox_bottom,bbox_right,bbox_bottom+2,obj_slope_r,1,0)) { 
    
        //If Mario's horizontal speed is lower than 0.
        if (hspeed &lt; 0) { 
    
            //Move 4 pixels downwards as many horizontal speed Mario has to ensure correct slope collision.
            if (!place_meeting(x,bbox_bottom+2,obj_solidtop))
                y += 2 //abs(hspeed)/2;
            else
                y += abs(hspeed)/2;
        }
    }
    
    //22.5º Left Slope
    else if (collision_rectangle(bbox_left,bbox_bottom,x,bbox_bottom+2,obj_slope_l,1,0)) { 
    
        //If Mario's horizontal speed is greater than 0.
        if (hspeed &gt; 0) { 
    
            //Move 4 pixels downwards as many horizontal speed Mario has to ensure correct slope collision.
            if (!place_meeting(x,bbox_bottom+2,obj_solidtop))
                y += 2 //abs(hspeed)/2;
            else
                y += abs(hspeed)/2;
        }
    }
}

//Handle tail whip animation
if (state == 2) {

    if (wiggle &gt; 0)
        wiggle--;
}
else
    wiggle = 0;

//Check if Mario is on contact with the ground
if (state &lt; 2) {

    infloor = true;
    if (disablegrav &gt; 0) {
    
        disablegrav = 0;
    }
}
else {

    if (global.kuriboshoe) {
    
        if (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+12,obj_solidtop,0,0))
        || (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+18,obj_slopeparent,1,0)) 
        || (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+12,obj_platformparent,1,0)) {
        
            infloor = true;
        }
        else {
        
            infloor = false;
        }
    }
    else
        infloor = false;
}
    
//If Mario is not in contact with water.
if (!collision_rectangle(bbox_left,y,bbox_right,bbox_bottom,obj_swim,1,1)) 
&amp;&amp; (!collision_rectangle(bbox_left,y,bbox_right,bbox_bottom,obj_fakeswim,1,1)) {

    //If the player is swimming.
    if (swimming) {
    
        swimming = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario bounce

//Set the vertical speed.
vspeed = -3.9;

//Move 6 pixels upwards.
y -= 6;

//Let mario vary his jump.
if (keyboard_check(vk_shift))
    jumping = 1;
else
    jumping = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hurt Mario

if (invulnerable == false) {

    //If Mario is wearing a kuribo shoe.
    if (global.kuriboshoe) {
    
        //Play a 'powerdown' sound.
        audio_play_sound(snd_powerlost,0,false);
        
        //Create a effect
        ID = instance_create(x,y-16,obj_powerup_lost);
        with (ID) {
        
            sprite_index = spr_kuriboshoe_lose;
            image_xscale = other.xscale;
        }
        
        //Make Mario blink
        alarm[0] = 90;
        alarm[1] = 1;
        
        //Make Mario invulnerable
        invulnerable = true;
        
        //End kuribo shoe mode
        global.kuriboshoe = false;
        
        //Destroy the shoe
        with (obj_kuriboshoe_ride) instance_destroy(); 
    }
    
    else {
    
        //If Mario is small
        if (global.powerup == cs_small) {
        
            instance_create(x,y,obj_mario_dead);
            instance_destroy();
            exit;
        }
        
        //Otherwise, if Mario is big.
        else if (global.powerup == cs_big) {
        
            //Play a 'powerdown' sound
            audio_play_sound(snd_pipe,0,false);
        
            //Set up 'Big' powerup.
            global.powerup = cs_small;
            
            //Make Mario blink
            alarm[0] = 90;
            alarm[1] = 1;
            
            //Make Mario invulnerable
            invulnerable = true;
        
            //Initialize animation sequence.
            with (instance_create(0,0,obj_mario_transform)) {
            
                sequence = 1;
            } 
        }
        
        //Otherwise, if Mario does have a powerup.
        else if (global.powerup &gt; cs_big) {
        
            //If the powerup is a suit-grade powerup.
            if (global.powerup &gt;= cs_frog) {
            
                //Play a 'powerdown' sound.
                audio_play_sound(snd_powerlost,0,false);
                
                //Create a effect
                ID = instance_create(x-8,y-16,obj_powerup_lost);
                with (ID) {
                
                    switch (global.powerup) {
                    
                        case (cs_frog): { //Frog
                        
                            image_index = 0;
                        } break;
                        case (cs_tanooki): { //Tanooki
                        
                            image_index = 1;
                        } break;
                        case (cs_hammer): { //Hammer
                        
                            image_index = 2;
                        } break;
                    }
                }
                
                //Make Mario blink
                alarm[0] = 90;
                alarm[1] = 1;
                
                //Make Mario invulnerable
                invulnerable = true;
                
                //Set up 'Big' powerup.
                global.powerup = cs_big;
            }
            
            //Otherwise, if the powerup is not a suit-grade.
            else {
            
                //Play a 'powerdown' sound
                audio_play_sound(snd_transform,0,false);
            
                //Set up 'Big' powerup.
                global.powerup = cs_big;
                
                //Make Mario blink
                alarm[0] = 90;
                alarm[1] = 1;
                
                //Make Mario invulnerable
                invulnerable = true;
                
                //Initialize animation sequence.
                with (instance_create(0,0,obj_mario_transform)) {
                
                    sequence = 3;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop Mario when he's walking with the frog suit.

if (global.kuriboshoe)
exit;

//Frog Mario Walk
if (sprite_index == spr_mario_frog_walk) {

    //If Mario is not jumping.
    if (state != 2) {

        //Stop horizontal speed.
        hspeed = 0;
    
        //Play frog jump sound.
        audio_play_sound(snd_frog,0,0);
    }
}

//Frog Mario Swim
if (sprite_index == spr_mario_frog_swim2)
|| (sprite_index == spr_mario_frog_swim3)
|| (sprite_index == spr_mario_frog_swim4) {

    //Play frog swim sound.
    audio_play_sound(snd_swim,0,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Mario

//Set the palette.
if (isflashing &gt; 0) {

    pal_swap_set(pal_sprite,current_pal);    
}

//Draw Mario Shaded
draw_sprite_ext(sprite_index,-1,round(x),round(y)+1+shakey,xscale,1,0,c_white,image_alpha);
if (global.hwrap) {

    if (x &gt; room_width-(abs(sprite_width/2))) {
    
        draw_sprite_ext(sprite_index,-1,round(x)-room_width,round(y)+1+shakey,xscale,1,0,c_white,image_alpha);
    }
    else if (x &lt; (abs(sprite_width/2))) {
    
        draw_sprite_ext(sprite_index,-1,round(x)+room_width,round(y)+1+shakey,xscale,1,0,c_white,image_alpha);
    }
}

//Reset Shader
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario buttslide, wheeee!

if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_solidtop,0,0))
&amp;&amp; (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_platformparent,0,0)) {

    //If Mario is on contact with a slope.
    if (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_slopeparent,1,0))
    &amp;&amp; (state &lt; 2)
    &amp;&amp; (!sliding) {
    
        //If Mario does have the Frog powerup.
        if (global.powerup == cs_frog)
        exit;
        
        //Otherwise, if Mario does have the Hammer powerup.
        else if (global.powerup == cs_hammer) {
        
            //Crouch down.
            duck = true;
        }
        
        //Otherwise, if Mario does not have neither Frog or Hammer powerup.
        else {
        
            //If Mario is holding something or it's wearing a kuriboshoe.
            if ((holding) || (disablecontrol) || (global.kuriboshoe))
            exit;
            
            //If Mario is not swimming.
            if (!swimming) {
        
                //Start sliding.
                sliding = true;
                
                //Give Mario a boost start.
                if (hspeed == 0) {
                
                    if ((place_meeting(x,y+1,obj_slope_r)) || (place_meeting(x,y+1,obj_slope_sr))) {
                    
                        //Slide to the left.
                        hspeed = -0.05;
                    }
                    else if ((place_meeting(x,y+1,obj_slope_l)) || (place_meeting(x,y+1,obj_slope_sl))) {
                    
                        //Slide to the right.
                        hspeed = 0.05;
                    }
                }
            }
            
            //Otherwise, if Mario is not swimming.
            else {
            
                //Make Mario crouch down.
                duck = true;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario shoot a projectile.

if (disablecontrol == false)
&amp;&amp; (holding == false)
&amp;&amp; (sliding == false) 
&amp;&amp; (depth != 16)
&amp;&amp; (!tile12)
&amp;&amp; (!tile15) {

    //Statue Mario
    if (global.powerup == cs_tanooki) &amp;&amp; (!instance_exists(obj_spinner)) &amp;&amp; (keyboard_check(vk_down)) { //If Mario has the tanooki powerup and is not spinning.
    
        //If Mario is not wearing a shoe.
        if (!global.kuriboshoe) {
        
            //Play a transforming sound.
            audio_play_sound(snd_transform,0,0);
        
            //Create a poof.
            with (instance_create(x,y,obj_mario_transform)) sequence = 3;
            
            //Create a statue.
            instance_create(x,y,obj_statue);
        }
    }
    
    //Make Mario shoot projectiles
    else if (!duck) { //If Mario is not crouched down.
        
        //Fireball
        if (global.powerup == cs_fire) { //If Mario does have the fire powerup.
        
            //If there's 2 or less fireballs.
            if (instance_number(obj_fireball) &lt; 2) {
            
                if (scr_can_shoot()) {
            
                    //Play 'Fireball' sound
                    audio_play_sound(snd_fireball,0,0);
                
                    //Create a fireball.
                    with (instance_create(x,y,obj_fireball)) {
                    
                        vspeed = 3;
                        if (other.xscale = 1)
                            hspeed = 3;
                        else if (other.xscale = -1)
                            hspeed = -3;
                    }
                    
                    //Make Mario play his firing animation.
                    firing = 9;
                }
            }
        }
        
        //Tail spin
        else if ((global.powerup == cs_raccoon) || (global.powerup == cs_tanooki)) { //If Mario does have the raccoon or tanooki powerup.
        
            if ((scr_can_shoot()) &amp;&amp; (!global.kuriboshoe)) {
            
                if (instance_number(obj_spinner) &lt; 1) { //If Mario is not spinning.
                
                    //Make Mario spin
                    instance_create(x,y,obj_spinner);
                }
            }
        }
        
        //Hammer
        else if (global.powerup == cs_hammer) { //If Mario does have the Hammer powerup.
        
            //If there's 2 or less fireballs.
            if (instance_number(obj_hammer) &lt; 2) {
            
                if (scr_can_shoot()) {
            
                    //Play 'Fireball' sound
                    audio_play_sound(snd_fireball,0,0);
                
                    //Create a fireball.
                    with (instance_create(x,y+4,obj_hammer)) {
                    
                        vspeed = -5;
                        if (other.xscale = 1)                    
                            hspeed = obj_mario.hspeed+1;
                        else if (other.xscale = -1)
                            hspeed = obj_mario.hspeed-1;
                    }
                    
                    //Make Mario play his firing animation.
                    firing = 9;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario float or fly.

//If Mario does have the raccoon or tanooki powerup.
if ((global.powerup == cs_raccoon) || (global.powerup == cs_tanooki)) {

    if (state == 2)
    &amp;&amp; (swimming == false)
    &amp;&amp; (global.kuriboshoe == false) {
    
        //If Mario is running.
        if ((run) || (global.pwing)) {
        
            //Play 'tail' sound.
            audio_stop_sound(snd_spin);
            audio_play_sound(snd_spin,0,0);
            
            //Make Mario able to fly for 4 seconds
            if (!flying) {
            
                flying = true;
                alarm[11] = 240;
            }
            
            //Whip tail.
            wiggle = 16;
            
            //Disable gravity.
            disablegrav = 16;            
            
            //Set the vertical speed.
            if ((alarm[11] &gt; 30) || (global.pwing)) {
            
                vspeed = -1.5;
            }
            else {
            
                if (vspeed &lt; 0) {
                
                    //Slowdown Mario till he stops
                    vspeed  = max(vspeed + 0.5, 0);
                }
                else
                    vspeed = 0;
            }
        }
        else { //Otherwise, if Mario is not running.
        
            //Play 'tail' sound.
            audio_stop_sound(snd_spin);
            audio_play_sound(snd_spin,0,0);      
            
            //Whip tail.
            wiggle = 16;
            
            //Disable gravity.
            disablegrav = 16;
            
            //Set the vertical speed.
            vspeed = 0.75;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
