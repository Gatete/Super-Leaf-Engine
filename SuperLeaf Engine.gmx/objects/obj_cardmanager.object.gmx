<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cardgame_cursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A game of card matching.

//Check if the previous card count exists.
if (!ds_map_exists(global.cardgame,"count")) {

    //Create the game.
    ds_map_add(global.cardgame,"count", 0);
}

//Remember the previous card count.
count = ds_map_find_value(global.cardgame,"count");

//Wait for input
ready = 0;

//Number of cards flipped in the current pair.
cardcount = 0;

//Number of wrong matches
wrong = 0;

//The image on the last card flipped.
oncard = -1;

//The id of the last card flipped.
lastcard = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change the background.

background_index[0] = bgr_minigame_card_b;
alarm[2] = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animate the background if a card match was made.

background_index[0] = bgr_minigame_card_a;
if (ready == 1) {

    alarm[3] = 4;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop celebration

ready = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Progress the game.

//Return to the world map if there were 2 wrong matches or 18 cards flipped
if ((wrong == 2) || (count == 18)) {
    
    //Return to map
    if (instance_number(obj_fade_in) == 0) {
    
        //Create a fade in effect.
        ID = instance_create(0,0,obj_fade_in);
        with (ID) {
        
            target = rm_map;
        }
    }    
}

//Otherwise, wait for user input.
else
    ready = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move the cursor

//If the game is waiting for input
if (!ready) {

    //If up is pressed not on the top row.
    if ((keyboard_check_pressed(vk_up)) &amp;&amp; (y != 56)) {
    
        //Move to the card above
        y -= 48;
        
        //Play the sound
        audio_play_sound(snd_move,0,0);
    }

    //If down is press not on the bottom row.
    if ((keyboard_check_pressed(vk_down)) &amp;&amp; (y != 152)) {
    
        //Move to the card below
        y += 48;
        
        //Play the sound
        audio_play_sound(snd_move,0,0);
    }

    //If left is pressed not on the left row
    if ((keyboard_check_pressed(vk_left)) &amp;&amp; (x != 48)) {

        //Move to the card to the left
        x -= 32;

        //Play the sound
        audio_play_sound(snd_move,0,0);
    }

    //If right is pressed not on the right row
    if ((keyboard_check_pressed(vk_right)) &amp;&amp; (x != 208)) {

        //Move to the card to the right
        x += 32;

        //Play the sound
        audio_play_sound(snd_move,0,0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_card">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Flip cards

//If shift is pressed when the game is accepting input and the card is not flipped
if (other.sprite_index = spr_cardgame_flip) &amp;&amp; (ready = 0) &amp;&amp; (keyboard_check_pressed(vk_shift)) {

    //Disable input
    ready = 1;

    //Play the correct sound
    audio_play_sound(snd_cardflip,0,0);

    //Make the card start flipping
    other.image_speed = 0.3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remember the state of the game.

//Stop music
FMODInstanceStop(global._stream_minigame);
global._stream_minigame = -1;

//Clear the state of the game if all cards were flipped
if (count == 18) {

    //Clear all cards
    ds_map_clear(global.cardgame);
    
    //Get a new card pattern
    global.cardpattern++;
    if (global.cardpattern &gt; 8)
        global.cardpattern = 1;
}

//Otherwise
else {

    //Remember the number of cards flipped
    if (ds_map_exists(global.cardgame,"count")) {
    
        ds_map_replace(global.cardgame,"count",count);
    }
    else
        ds_map_add(global.cardgame,"count",count)

    //For all cards
    with (obj_card) {

        //Remember cards that are flipped
        if (sprite_index = spr_cardgame_cards) {
        
            if (ds_map_exists(global.cardgame,string(id))) {
            
                ds_map_replace(global.cardgame,string(id),1);
            }
            else
                ds_map_add(global.cardgame,string(id),1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Flip the cards that were flipped in the previous game, call the HUD and fade out the room.

//For all cards
with (obj_card) {

    //If the card was flipped in a previous game
    if (ds_map_exists(global.cardgame,string(id))) {

        //Flip the card
        sprite_index = spr_cardgame_cards;

        //Choose the correct card image
        image_index = mycard;
    }
}

//Call the HUD object.
instance_create(0,0,obj_hud);

//Open up a curtain.
instance_create(0,0,obj_fade_out);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
