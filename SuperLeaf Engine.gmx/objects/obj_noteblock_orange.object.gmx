<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_noteblock_orange</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_blockparent</parentName>
  <maskName>spr_square</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Warps Mario to a different room

/*
**  This item uses creation code!
**
**  postchange = Pick from below: (Optional)
**      0: Mario
**      1: Warp Mario
**      2: Jump Spawn
**
**  postx = New x coordinate
**  posty = New y coordinate
**  myroom = Destination room (Optional)
**
*/

//Default Values:
postchange = -1;
postx = 0;
posty = 0;
myroom = room_next(room);

//Animate
image_speed = 0.15;

//Call the inherited event.
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Finish block bump

//Stop horizontal/vertical speed.
x = xstart;
y = ystart;
speed = 0;
ready = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reverse direction

//If the block has been hit from above
if (vspeed &gt; 0) {

    //Create a warp room.
    ID = instance_create(x,view_yview[0]-96,obj_warproom);
    with (ID) {
    
        postchange = other.postchange;
        postx = other.postx;
        posty = other.posty;
        myroom = other.myroom;
    }

    //Make Mario do something.
    with (obj_mario) {
    
        //Enables gravity.
        disablegrav = 0;
        
        //Makes Mario able to vary the height of his jump.
        jumping = 1;
        
        //Check if the shift key is pressed for more jump strength.
        if (keyboard_check(vk_shift)) {
        
            //Play a spring sound.
            audio_play_sound(snd_note,0,false);
            
            //Create Note Mario
            with (instance_create(x,y,obj_mario_note)) image_xscale = other.xscale;
            
            //Destroy Mario
            instance_destroy();
        }
        
        //Otherwise, if the shift key is not pressed.
        else {
        
            //Set the vertical speed.
            vspeed = -2.925;
            
            //Play a spring sound.
            audio_play_sound(snd_bump,0,false);
        }
    }
}

//Reverse speed
speed = -speed;

//Finish block bump
alarm[1] = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario bounce.

//If Mario does exist.
if (instance_exists(obj_mario)) {

    //Make Mario bounce
    if (collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top-1,obj_mario,0,1))
    &amp;&amp; (!collision_rectangle(obj_mario.bbox_left,obj_mario.bbox_bottom,obj_mario.bbox_right,obj_mario.bbox_bottom+1,obj_platformparent,0,1))
    &amp;&amp; (obj_mario.vspeed == 0)
    &amp;&amp; (!ready) {
    
        //Prevent Mario from jumping
        with (obj_mario) jumping = 2;
        
        //Set the vertical speed.
        vspeed = 3;        
        
        //Mark as hit.
        ready = 1;
        
        //Change direction
        alarm[0] = 4;
    }
    
    //If Mario hits it from the side.
    if ((collision_rectangle(bbox_left-1,bbox_top,bbox_right+1,bbox_bottom,obj_mario,0,1)) &amp;&amp; (!ready)) {
    
        //Make Mario do something.
        with (obj_mario) {
        
            //Check where's Mario and bump him onto the opposite direction.
            if (x &lt; other.x+8) { //If Mario is at the left of the block.
            
                //Set the block horizontal speed
                other.hspeed = 3;                
                
                //Set Mario's horizontal speed.
                if (!instance_exists(obj_spinner))                
                    hspeed = -2;
            }
            
            //Otherwise, if Mario is at the right of the block.
            else {
            
                //Set the block horizontal speed
                other.hspeed = -3;                  
                
                //Set Mario's horizontal speed.
                if (!instance_exists(obj_spinner))                
                    hspeed = 2;
            }
        }
        
        //Mark as hit.
        ready = 1;
        
        //Change direction
        alarm[0] = 4;
        
        //Play a 'bump' sound
        audio_play_sound(snd_bump,0,0);
    }
}

//Snap solid into position.
mysolid.y = round(y);

//If Mario overlaps the block, keep him above it.
if (ready) {

    if (collision_rectangle(bbox_left,bbox_top-5,bbox_right,bbox_top+4,obj_mario,0,0))
    &amp;&amp; (obj_mario.state &lt; 2)
    &amp;&amp; (obj_mario.vspeed &gt;= 0)
    &amp;&amp; (obj_mario.y &lt; bbox_top-11) {
    
        //Snap Mario above the block.
        obj_mario.y = ceil(bbox_top-16);
        
        //Prevent him from jumping.
        obj_mario.jumping = 2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
