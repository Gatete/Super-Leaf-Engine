<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_drybones</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_deactenemyparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drybones

//Animate
image_speed = 0.15;

//Call inherited event
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start moving.

//Call inherited event
event_inherited();

//Set fireproof flag
fireproof = true;

//Set death sprite
deadspr = spr_drybones_crumble;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation

if (place_meeting(x,y+1,obj_solidtop))
|| (place_meeting(x,y+2,obj_slopeparent)) {

    image_speed = 0.15;
}
else {

    image_speed = 0;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default event

//Default Wall collisions.
event_user(0);

//Default Floor / Ceiling collisions.
event_user(1);

//Turn at enemies script
event_user(2);

//Default underwater script.
var water = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_swim,0,0); //Check for the nearest water object and make the object swim.
if (!swimming) &amp;&amp; (water) {
    
    //Make the object swim.
    swimming = true;
    
    //Stop vertical movement.
    gravity = 0;
    if (vspeed &gt; 0)
        vspeed = 0;
}
else if (swimming) &amp;&amp; (!water) { //If the object is swimming and there's no water above.

    //Make the object not swim.
    swimming = false;
}

//Set the facing direction
if (hspeed &gt; 0)
    xscale = 1;
if (hspeed &lt; 0)
    xscale = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Conveyor belt collision.

if (vspeed == 0) {

    //Left conveyor belt collision
    lconv = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_conveyor_l,0,0); 
    if ((lconv) &amp;&amp; (lconv.image_speed != 0)) {
    
        //If there's not a solid on the way.
        if (!collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0)) {
        
            //If the horizontal speed is lower than 0.
            if (hspeed &lt; 0) {
            
                x += hspeed*2;
            }
            
            //Otherwise, if the horizontal speed is equal/greater than 0.
            else {
            
                if (hspeed == 0)
                    x--;
                else
                    x -= hspeed/2;
            }
        }
    }
    
    //Right conveyor belt collision
    rconv = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_conveyor_r,0,0);
    if ((rconv) &amp;&amp; (rconv.image_speed != 0)) {
    
        //If there's not a solid on the way.
        if (!collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,1,0)) {
        
            //If the horizontal speed is greater than 0.
            if (hspeed &gt; 0) {
            
                x += hspeed*2;
            }
            
            //Otherwise, if the horizontal speed is equal/greater than 0.
            else {
            
                if (hspeed == 0)
                    x++;
                else
                    x -= hspeed/2;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wraps around if enabled on the level.

if (global.hwrap) { //If room wrapping is enabled on the room.
    
    //If Mario is nearby the right boundary of the room.
    if (x &gt; room_width) {
    
        //Make Mario go to the left boundary of the room.
        x -= room_width;
    }    
    
    //Otherwise, if Mario is nearby the left boundary of the room.
    else if (x &lt; 0) {
    
        //Make Mario go to the right boundary of the room.
        x += room_width;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mario">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with Mario.

//Deny event if starman is active.
if (instance_exists(obj_invincibility))
exit;

//Deny if Mario is behind the scenery.
if (obj_mario.depth == 16) {

    if (obj_mario.tile12 &gt; -1) || (obj_mario.tile15 &gt; -1)
        exit;
}

//If Mario is sliding down a slope.
if (!other.sliding) {

    //If Mario is above and moving down.
    if ((other.bbox_bottom &lt; bbox_top-vspeed+5) &amp;&amp; (other.vspeed &gt;= 0)) {

        //If Mario is wearing a kuribo shoe.
        if (global.kuriboshoe) {
        
            //Play a stomp sound
            audio_play_sound(snd_crumble,0,0);
            
            //Execute combo script.
            musical_scale(other.id,id,0);
            
            //Kill enemy
            event_user(5);
            
            //Make Mario jump
            with (other) event_user(1);            
                                
            //Create hit effect.
            ID = instance_create(other.x,other.bbox_bottom-8,obj_smoke);
            with (ID) {
            
                sprite_index = spr_spinthump;
            }    
        }
        
        //Otherwise, use default event.
        else {
        
            //If the enemy is not spiked.
            if (!spiked) {
        
                //Play a stomp sound
                audio_play_sound(snd_crumble,0,0);
                
                //Execute combo script.
                musical_scale(other.id,id,0);
            
                //Default stomp event.
                event_user(5);
                
                //Make Mario jump
                with (other) event_user(1);            
                                    
                //Create hit effect.
                ID = instance_create(other.x,other.bbox_bottom-8,obj_smoke);
                with (ID) {
                
                    sprite_index = spr_spinthump;
                }
            }
            
            //Otherwise, if the enemy is spiked.
            else {
            
                //Hurt Mario
                with (other) event_user(0);                
            }
        }
    }
    else {
    
        //Hurt Mario
        with (other) event_user(0);
    }
}

//Otherwise, if Mario is sliding down a slope.
else {

    //If the enemy is not spiked.
    if (!spiked) {
    
        //Play 'kick' sound
        audio_play_sound(snd_kick,0,0);
    
        //Get 100 points
        with (instance_create(round(bbox_left+bbox_right)/2-8,round(y),obj_score)) event_user(0);
        
        //Kill enemy
        event_user(4);
        
        //Create hit effect.
        ID = instance_create(other.x,other.y,obj_smoke);
        with (ID) {
        
            sprite_index = spr_spinthump;
        }
    }
    
    //Otherwise, if the enemy is spiked.
    else {
    
        //Hurt Mario
        with (other) event_user(0);        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Crumble

//Create a crumbled drybones
ID = instance_create(x,y,obj_drybones_crumble);
with (ID) {

    xscale = other.xscale;
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
