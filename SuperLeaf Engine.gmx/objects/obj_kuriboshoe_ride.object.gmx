<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_kuriboshoe</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A worn kuribo-shoe.

//Animate
image_speed = 0.15;

//Set up kuribo shoe mode.
global.kuriboshoe = true;

//Set up the object to follow.
follow = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Force player visibility

if (instance_exists(obj_mario))
    with (obj_mario) visible = true;
else {

    if (follow != noone)
        with (follow) visible = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kuribo shoe logic

//If Mario cleared the level
if (instance_exists(obj_mario_goal)) {

    //Play 'Transform' sound
    audio_play_sound(snd_transform,0,0);

    //Go poof
    instance_create(obj_mario_goal.x-8,obj_mario_goal.y,obj_smoke);
    instance_destroy();
    exit;
}

//Otherwise, make the rest of Mario objects visible.
else {

    with (obj_mario) visible = false;
    if (follow != noone)
        with (follow) visible = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create a wearable kuribo shoe.

//Create a shoe.
ID = instance_create(obj_mario.x,obj_mario.y,obj_kuriboshoe);
with (ID) {

    xscale = obj_mario.xscale;
}

//Destroy this shoe.
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw both Mario and Kuriboshoe

//Set up the instance to follow.
if (instance_exists(obj_mario_warp)) {

    follow = obj_mario_warp;
    depth = 10;
}
else if (instance_exists(obj_mario_door)) {

    follow = obj_mario_door;
    depth = obj_mario_door.depth;
}
else if (instance_exists(obj_mario_jump)) {

    follow = obj_mario_jump;
    depth = -5;
}
else if (instance_exists(obj_mario_note)) {

    follow = obj_mario_note;
    depth = -5;
}
else {

    follow = noone;
    depth = -5;
}

//If Mario does exist and it's not warping or jumping.
if (instance_exists(obj_mario)) {
    
    //Draw Mario.
    if (obj_mario.isflashing &gt; 0) { //Set the palette.
    
        pal_swap_set(obj_mario.pal_sprite,obj_mario.current_pal);    
    }
    
    //Draw Mario Shaded
    draw_sprite_ext(spr_mario_shoe,global.powerup,round(obj_mario.x),round(obj_mario.y)-15,obj_mario.xscale,1,0,c_white,obj_mario.image_alpha);
    if (global.hwrap) {
    
        if (x &gt; room_width-(abs(sprite_width/2))) {
        
            draw_sprite_ext(spr_mario_shoe,global.powerup,round(obj_mario.x)-room_width,round(obj_mario.y)-15,obj_mario.xscale,1,0,c_white,obj_mario.image_alpha);
        }
        else if (x &lt; (abs(sprite_width/2))) {
        
            draw_sprite_ext(spr_mario_shoe,global.powerup,round(obj_mario.x)+room_width,round(obj_mario.y)-15,obj_mario.xscale,1,0,c_white,obj_mario.image_alpha);
        }
    }
    
    //Reset Shader
    shader_reset();

    //Draw the Shoe.
    draw_sprite_ext(spr_kuriboshoe,obj_kuriboshoe_ride.image_index,round(obj_mario.x),round(obj_mario.y)+1,obj_mario.xscale,1,0,c_white,image_alpha);
    if (global.hwrap) {
    
        if (x &gt; room_width-(abs(sprite_width/2))) {
        
            draw_sprite_ext(spr_kuriboshoe,obj_kuriboshoe_ride.image_index,round(obj_mario.x)-room_width,round(obj_mario.y)+1,obj_mario.xscale,1,0,c_white,image_alpha);
        }
        else if (x &lt; (abs(sprite_width/2))) {
        
            draw_sprite_ext(spr_kuriboshoe,obj_kuriboshoe_ride.image_index,round(obj_mario.x)+room_width,round(obj_mario.y)+1,obj_mario.xscale,1,0,c_white,image_alpha);
        }
    }
}
else if (instance_exists(follow)) {

    if (follow.kuribofix) {
    
        //Draw following object.
        if (follow.isflashing &gt; 0) { //Set the palette.
        
            pal_swap_set(follow.pal_sprite,follow.current_pal);    
        }
        
        //Draw Mario Shaded
        draw_sprite_ext(spr_mario_shoe,global.powerup,round(follow.x),round(follow.y)-15,follow.image_xscale,1,0,c_white,image_alpha);
        if (global.hwrap) {
        
            if (x &gt; room_width-(abs(sprite_width/2))) {
            
                draw_sprite_ext(spr_mario_shoe,global.powerup,round(follow.x)-room_width,round(follow.y)-15,follow.image_xscale,1,0,c_white,image_alpha);
            }
            else if (x &lt; (abs(sprite_width/2))) {
            
                draw_sprite_ext(spr_mario_shoe,global.powerup,round(follow.x)+room_width,round(follow.y)-15,follow.image_xscale,1,0,c_white,image_alpha);
            }
        }
        
        //Reset Shader
        shader_reset();
    
        //Draw the Shoe.
        draw_sprite_ext(spr_kuriboshoe,obj_kuriboshoe_ride.image_index,round(follow.x),round(follow.y)+1,follow.image_xscale,1,0,c_white,image_alpha);
        if (global.hwrap) {
        
            if (x &gt; room_width-(abs(sprite_width/2))) {
            
                draw_sprite_ext(spr_kuriboshoe,obj_kuriboshoe_ride.image_index,round(follow.x)-room_width,round(follow.y)+1,follow.image_xscale,1,0,c_white,image_alpha);
            }
            else if (x &lt; (abs(sprite_width/2))) {
            
                draw_sprite_ext(spr_kuriboshoe,obj_kuriboshoe_ride.image_index,round(follow.x)+room_width,round(follow.y)+1,follow.image_xscale,1,0,c_white,image_alpha);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
