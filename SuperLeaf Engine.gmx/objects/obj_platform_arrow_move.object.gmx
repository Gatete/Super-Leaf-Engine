<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_platform_arrow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_platformparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A platform which you can set up it's direction.

//Default variable.
mode = 0;

//Do not animate.
image_speed = 0;

//Change direction.
ready = 0;

//Set up the new direction.
dir = 0;

//Make it blink.
alarm[0] = 1380;

//Make it disappear.
alarm[1] = 1500;

//Set up the speed and direction.
alarm[3] = 1;

//Create a temporary platform.
ID = instance_create(-1000,-1000,obj_platform_fake);
with (ID) {

    image_xscale = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy temporary platform.

with (ID) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up the speed and direction.

switch (mode) {

    //All directions.
    case (0): {
    
        //Set the frame.
        image_single = 5;
        
        //Set the vertical speed.
        vspeed = -0.5;
    } break;
    
    //Up
    case (1): {
    
        //Set the frame.
        image_single = 5;
        
        //Make it not able to be changed
        ready = 2;
        
        //Set the vertical speed.
        vspeed = -0.5;
    } break;
    
    //Left
    case (2): {
    
        //Set the frame.
        image_single = 6;
        
        //Make it not able to be changed
        ready = 2;
        
        //Set the vertical speed.
        hspeed = -0.5;
    } break;
    
    //Right
    case (3): {
    
        //Set the frame.
        image_single = 7;
        
        //Make it not able to be changed
        ready = 2;
        
        //Set the vertical speed.
        hspeed = 0.5;
    } break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change the direction of the platform.

switch (dir) {

    //Up
    case (1): 
    case (3): {
    
        //Set the direction.
        direction = 90;
        
        //Set the image.
        image_index = 5;
    } break;
    
    //Left
    case (2): {
    
        //Set the direction.
        direction = 180;
        
        //Set the image.
        image_index = 6;
    } break;
    
    //Right
    case (4): {
    
        //Set the direction.
        direction = 0;
        
        //Set the image.
        image_index = 7;
    } break;    
}
dir++;
if (dir &gt; 4)
    dir = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make it blink

visible = !visible;
alarm[0] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default platform collision event

//If Mario overlaps the platform.
if (collision_rectangle(bbox_left,bbox_top-5,bbox_right,bbox_top+4,obj_mario,0,0))
&amp;&amp; (obj_mario.state &lt; 2)
&amp;&amp; (obj_mario.vspeed &gt;= 0)
&amp;&amp; (obj_mario.y &lt; bbox_top-11) {

    //Change the direction if it's possible
    if (ready == 0) {
    
        //Play 'change' sound.
        audio_play_sound(snd_move,0,0);        
        
        //Change it.
        ready = 1;
        
        //Set the frame
        image_single = 4;
        
        //Set up the new frame.
        alarm[2] = 4;
        if (dir == 0) {
        
            if (obj_mario.xscale == 1)
                dir = 4;
            else
                dir = 2;
        }
    }

    //Snap Mario above the platform.
    obj_mario.y = ceil(bbox_top-16);   
    
    //If the platform is moving horizontally and there's a wall on the way.
    if ((x-xprevious &lt; 0) &amp;&amp; (!collision_rectangle(obj_mario.bbox_left-1,obj_mario.bbox_top+4,obj_mario.bbox_left,obj_mario.bbox_bottom-1,obj_solid,0,1)))
    || ((x-xprevious &gt; 0) &amp;&amp; (!collision_rectangle(obj_mario.bbox_right,obj_mario.bbox_top+4,obj_mario.bbox_right+1,obj_mario.bbox_bottom-1,obj_solid,0,1))) {
    
        //Move Mario along with the platform.
        obj_mario.x += x-xprevious;        
    }
    
    //Destroy if Mario makes contact with the ceiling.
    if ((obj_mario.state != 2) &amp;&amp; (collision_rectangle(obj_mario.bbox_left,obj_mario.bbox_top-1,obj_mario.bbox_right,obj_mario.bbox_top,obj_solid,0,1)))
        instance_destroy();
}

//Otherwise, if Mario is not overlapping the platform.
else if (!collision_rectangle(bbox_left,bbox_top-5,bbox_right,bbox_top+4,obj_mario,0,1)) {
    
    if (instance_exists(ID)) {
    
        if (ready == 1) 
        &amp;&amp; (!collision_rectangle(obj_mario.bbox_left,bbox_top-5,obj_mario.bbox_right,bbox_top+4,ID,0,1))
            ready = 0;
    }
    else {
    
        if (ready == 1)
            ready = 0;
    }
}

//Moving solids should push Mario.
if ((x-xprevious &lt; 0) &amp;&amp; (collision_rectangle(bbox_left-(x-xprevious),bbox_top+1,bbox_left,bbox_bottom,obj_mario,0,0)))
|| ((x-xprevious &gt; 0) &amp;&amp; (collision_rectangle(bbox_right,bbox_top+1,bbox_right+(x-xprevious),bbox_bottom,obj_mario,0,0)))
    obj_mario.x += x-xprevious;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
