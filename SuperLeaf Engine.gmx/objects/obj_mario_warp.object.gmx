<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_warp</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_mask_warp</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario is warping through a pipe!

//Animate it.
image_speed = 0.2;

//Make Mario able to exit the pipe.
ready = false;
alarm[0] = 16;

//Set the depth
depth = 10;

//Play a sound when Mario is about to exit the pipe.
ready2 = false;

//Set up Mario's top boundary.
boundary = 16;

//Is Mario flashing?
isflashing = 0;
alarm[1] = 1;

//Is Mario holding?
holding = 0;
myitem = -1;
myframe = 0;

//Set the palette sprite.
pal_sprite = spr_palette;
current_pal = 0;

//Fixes a bug involving kuribo's shoe
kuribofix = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Mario's flashing effect.

//Make Mario flash if he's under the effects of the starman.
if (instance_exists(obj_invincibility)) {

    //Make Mario flash.
    isflashing = (isflashing mod 4)+1;
    
    //Repeat the process.
    if (obj_invincibility.alarm[0] &gt; 120)
        alarm[1] = 4;
    else
        alarm[1] = 8;
}
else {

    isflashing = 0;
    alarm[1] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario able to exit the pipe.

ready = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up Mario's sprite.

//Small Mario
if (global.powerup == cs_small) {

    //If Mario is moving vertically.
    if (vspeed &lt;&gt; 0) {
    
        //Do not animate.
        image_speed = 0;
        image_index = 0;
        
        //Set the sprite
        sprite_index = spr_mario_small_warp;
    }
    
    //Otherwise, if it's moving horizontally.
    else if (vspeed == 0) {
    
        //Animate it.
        image_speed = 0.2;
        
        //Set the sprite
        if (holding == 0)
            sprite_index = spr_mario_small_walk;
        else
            sprite_index = spr_mario_small_hold;
    }
}

//Big Mario
else if (global.powerup == cs_big) {

    //If Mario is moving vertically.
    if (vspeed &lt;&gt; 0) {
    
        //Do not animate.
        image_speed = 0;
        image_index = 0;
        
        //Set the sprite
        sprite_index = spr_mario_big_warp;
    }
    
    //Otherwise, if it's moving horizontally.
    else if (vspeed == 0) {
    
        //Animate it.
        image_speed = 0.2;
        
        //Set the sprite
        if (holding == 0)
            sprite_index = spr_mario_big_walk;
        else
            sprite_index = spr_mario_big_hold;
    }    
}

//Fire Mario
else if (global.powerup == cs_fire) {

    //If Mario is moving vertically.
    if (vspeed &lt;&gt; 0) {
    
        //Do not animate.
        image_speed = 0;
        image_index = 0;
        
        //Set the sprite
        sprite_index = spr_mario_fire_warp;
    }
    
    //Otherwise, if it's moving horizontally.
    else if (vspeed == 0) {
    
        //Animate it.
        image_speed = 0.2;
        
        //Set the sprite
        if (holding == 0)
            sprite_index = spr_mario_fire_walk;
        else
            sprite_index = spr_mario_fire_hold;
    }    
}

//Raccoon Mario
else if (global.powerup == cs_raccoon) {

    //If Mario is moving vertically.
    if (vspeed &lt;&gt; 0) {
    
        //Do not animate.
        image_speed = 0;
        image_index = 0;
        
        //Set the sprite
        sprite_index = spr_mario_raccoon_warp;
    }
    
    //Otherwise, if it's moving horizontally.
    else if (vspeed == 0) {
    
        //Animate it.
        image_speed = 0.2;
        
        //Set the sprite
        if (holding == 0)
            sprite_index = spr_mario_raccoon_walk;
        else
            sprite_index = spr_mario_raccoon_hold;
    }    
}

//Frog Mario
else if (global.powerup == cs_frog) {

    //If Mario is moving vertically.
    if (vspeed &lt;&gt; 0) {
    
        //Do not animate.
        image_speed = 0;
        image_index = 0;
        
        //Set the sprite
        sprite_index = spr_mario_frog_warp;
    }
    
    //Otherwise, if it's moving horizontally.
    else if (vspeed == 0) {
    
        //Animate it.
        image_speed = 0.2;
        
        //Set the sprite
        if (holding == 0)
            sprite_index = spr_mario_frog_walk;
        else
            sprite_index = spr_mario_frog_hold;
    }    
}

//Tanooki Mario
else if (global.powerup == cs_tanooki) {

    //If Mario is moving vertically.
    if (vspeed &lt;&gt; 0) {
    
        //Do not animate.
        image_speed = 0;
        image_index = 0;
        
        //Set the sprite
        sprite_index = spr_mario_tanooki_warp;
    }
    
    //Otherwise, if it's moving horizontally.
    else if (vspeed == 0) {
    
        //Animate it.
        image_speed = 0.2;
        
        //Set the sprite
        if (holding == 0)
            sprite_index = spr_mario_tanooki_walk;
        else
            sprite_index = spr_mario_tanooki_hold;
    }    
}

//Hammer Mario
else if (global.powerup == cs_hammer) {

    //If Mario is moving vertically.
    if (vspeed &lt;&gt; 0) {
    
        //Do not animate.
        image_speed = 0;
        image_index = 0;
        
        //Set the sprite
        sprite_index = spr_mario_hammer_warp;
    }
    
    //Otherwise, if it's moving horizontally.
    else if (vspeed == 0) {
    
        //Animate it.
        image_speed = 0.2;
        
        //Set the sprite
        if (holding == 0)
            sprite_index = spr_mario_hammer_walk;
        else
            sprite_index = spr_mario_hammer_hold;
    }    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pipe Mario logic

//Make Mario exit the pipe.
if ((ready == 1) &amp;&amp; (!collision_rectangle(x-8,y+boundary,x+7,bbox_bottom,obj_solid,0,0))) {

    //Create Mario
    mario = instance_create(x,y,obj_mario);
    with (mario) {
    
        xscale = other.image_xscale;
    }
    
    //Destroy Pipe Mario
    instance_destroy();
}

//Make Mario move slower/faster.
if (collision_point(x-8,bbox_top,obj_solid,0,0))
&amp;&amp; (collision_point(x+7,bbox_top,obj_solid,0,0))
&amp;&amp; (collision_point(x-8,bbox_bottom,obj_solid,0,0))
&amp;&amp; (collision_point(x+7,bbox_bottom,obj_solid,0,0)) {

    speed = 2;
    visible = false;
    kuribofix = false;
}
else {

    //Play a sound if Mario is about to exit a pipe.
    if ((ready == true) &amp;&amp; (ready2 == false)) {
    
        ready2 = true;
        audio_play_sound(snd_pipe,0,0);
    }
    
    //Make it visible
    visible = true;
    kuribofix = true;
    
    //Set the speed of Pipe Mario.
    speed = 0.5;
}

//Set the boundary
if (global.powerup == cs_small)
    boundary = 0;
else
    boundary = -12;


//Change the facing direction of Mario.
if (hspeed &gt; 0)
    image_xscale = 1;
else if (hspeed &lt; 0)
    image_xscale = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update the palette sprite.

current_pal = wrap(isflashing,0,pal_swap_get_pal_count(pal_sprite)-1);

//If Mario has the small, big or raccoon powerups.
if ((global.powerup == cs_small) || (global.powerup == cs_big) || (global.powerup == cs_raccoon)) {

    pal_sprite = spr_palette;
}

//Otherwise, if Mario has the fire powerup.
else if (global.powerup == cs_fire) {

    pal_sprite = spr_palette_fire;
}

//Otherwise, if Mario has the fire powerup.
else if (global.powerup == cs_frog) {

    pal_sprite = spr_palette_frog;
}

//Otherwise, if Mario has the fire powerup.
else if (global.powerup == cs_tanooki) {

    pal_sprite = spr_palette_tanooki;
}

//Otherwise, if Mario has the fire powerup.
else if (global.powerup == cs_hammer) {

    pal_sprite = spr_palette_hammer;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_right">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go right!

//Set the direction.
direction = 0;

//Snap to position.
move_snap(16,16);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_left">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go left!

//Set the direction.
direction = 180;

//Snap to position.
move_snap(16,16);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_down">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go down!

//Set the direction.
direction = 270;

//Snap to position.
move_snap(16,16);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_up">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go up!

//Set the direction.
direction = 90;

//Snap to position.
move_snap(16,16);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_warproom">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Warp to another room.

//With the warp object.
with (other) {

    //If the position needs to be changed in the new room.
    if (postchange != -1) {
    
        //Remember the spawn type
        global.postchange = postchange;
        
        //Remember the x spawn position.
        global.postx = postx+16;
        
        //Remember the y spawn position.
        global.posty = posty;
    }
    
    //Go to the assigned room
    if (instance_number(obj_fade_in) == 0) {
    
        //Create a fade in effect.
        ID = instance_create(0,0,obj_fade_in);
        with (ID) {
        
            target = other.myroom;
        }
    }
}

//Stop Mario
speed = 0;

//Snap to position
move_snap(16,16);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Mario

//Draw the item if it exists
if ((holding &gt; 0) &amp;&amp; (vspeed == 0)) {

    //Draw the item
    draw_sprite_ext(myitem,myframe,round(x)+10*image_xscale,round(y)-1,1,1,0,c_white,1);
}

//Set the palette.
if (isflashing &gt; 0) {

    pal_swap_set(pal_sprite,current_pal);    
}

//Draw Mario Shaded
draw_sprite_ext(sprite_index,-1,round(x),round(y)+1,image_xscale,1,0,c_white,image_alpha);

//Reset Shader
shader_reset();

//Draw the item if it exists
if ((holding &gt; 0) &amp;&amp; (vspeed &lt;&gt; 0)) {

    //Draw the item
    draw_sprite_ext(myitem,myframe,round(x),round(y)-1,1,1,0,c_white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
