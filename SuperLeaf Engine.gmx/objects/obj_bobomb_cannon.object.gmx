<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bobomb_cannon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_deactenemyparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cannon Bobomb

//Animate
image_speed = 0.15;

//Flash
alarm[0] = 240;
alarm[1] = 300;

//Prevent wall bug
bugfix = 0;
alarm[2] = 8;

//Is the bomb stunned
stun = false;

//Call inherited event
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change direction

if (!stun) {

    if ((hspeed != 0) &amp;&amp; (vspeed == 0)) {
    
        //If Mario does exist.
        if (instance_exists(obj_mario)) {
        
            if (obj_mario.x &gt; x)
                hspeed = 1;
            else if (obj_mario.x &lt; x)
                hspeed = -1;
        }
        else {
        
            if (obj_levelmanager.x &gt; x)
                hspeed = 1;
            else if (obj_levelmanager.x &lt; x)
                hspeed = -1;
        }
    }
    
    //Repeat the process
    alarm[11] = 30 + random(round(30));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start moving.

//Change direction
alarm[11] = 30;

//Set death sprite
deadspr = spr_bobomb_cannon;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prevent wall bug

bugfix = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Explode

instance_create(x,y,obj_explosion);
instance_destroy();
exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop and flash

//Set the sprite
sprite_index = spr_bobomb_cannon_th;

//Animate
image_speed = 0.3;

//Stop horizontal speed
if (vspeed == 0) {
    
    hspeed = 0;
}

//Make Mario able to kick it
stun = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation

if (!stun) {
    
    if (place_meeting(x,y+1,obj_solidtop))
    || (place_meeting(x,y+2,obj_slopeparent)) {
    
        image_speed = 0.15;
    }
    else {
    
        image_speed = 0;
        image_index = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cannon bobomb logic

//If the bobomb is stunned.
if (stun) {
    
    //Slowdown in contact with the ground.
    if (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_solidtop,0,0))
    || (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_slopeparent,1,0)) {
    
        //Reduce the item speed until it stops.
        hspeed = max(0,abs(hspeed)-0.075)*sign(hspeed);
        
        //Set up horizontal speed to 0 when hspeed hits 0.075.
        if ((hspeed &lt; 0.075) &amp;&amp; (hspeed &gt; -0.075)) {
        
            hspeed = 0;
        }        
    }
}

//Otherwise, if it's not.
else if (!stun) {

    //Turn at enemies script
    event_user(2);    
}

//Default Wall collisions.
event_user(0);

//Default Floor / Ceiling collisions.
event_user(1);

//Default underwater script.
var water = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_swim,0,0); //Check for the nearest water object and make the object swim.
if (!swimming) &amp;&amp; (water) {
    
    //Make the object swim.
    swimming = true;
    
    //Stop vertical movement.
    gravity = 0;
    if (vspeed &gt; 0)
        vspeed = 0;
}
else if (swimming) &amp;&amp; (!water) { //If the object is swimming and there's no water above.

    //Make the object not swim.
    swimming = false;
}

//Set the facing direction
if (hspeed &gt; 0)
    xscale = 1;
else if (hspeed &lt; 0)
    xscale = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Conveyor belt collision.

if (vspeed == 0) {

    //Left conveyor belt collision
    lconv = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_conveyor_l,0,0); 
    if ((lconv) &amp;&amp; (lconv.image_speed != 0)) {
    
        //If there's not a solid on the way.
        if (!collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0)) {
        
            //If the horizontal speed is lower than 0.
            if (hspeed &lt; 0) {
            
                x += hspeed*2;
            }
            
            //Otherwise, if the horizontal speed is equal/greater than 0.
            else {
            
                if (hspeed == 0)
                    x--;
                else
                    x -= hspeed/2;
            }
        }
    }
    
    //Right conveyor belt collision
    rconv = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_conveyor_r,0,0);
    if ((rconv) &amp;&amp; (rconv.image_speed != 0)) {
    
        //If there's not a solid on the way.
        if (!collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,1,0)) {
        
            //If the horizontal speed is greater than 0.
            if (hspeed &gt; 0) {
            
                x += hspeed*2;
            }
            
            //Otherwise, if the horizontal speed is equal/greater than 0.
            else {
            
                if (hspeed == 0)
                    x++;
                else
                    x -= hspeed/2;
            }
        }
    }
    
    //Platform collision
    semisolid = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_solidtop_tanks,0,0);
    if (semisolid) 
    &amp;&amp; (vspeed &gt;= 0) 
    &amp;&amp; (bbox_bottom &lt; semisolid.yprevious+5) {
    
        //Snap into position
        y = semisolid.bbox_top-16;
        
        //Snap horizontally
        if (semisolid.x-xprevious &lt; 0) &amp;&amp; (!collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,0,1))
        || (semisolid.x-xprevious &gt; 0) &amp;&amp; (!collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,0,1))
            x += semisolid.x-semisolid.xprevious;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wraps around if enabled on the level.

if (global.hwrap) { //If room wrapping is enabled on the room.
    
    //If Mario is nearby the right boundary of the room.
    if (x &gt; room_width) {
    
        //Make Mario go to the left boundary of the room.
        x -= room_width;
    }    
    
    //Otherwise, if Mario is nearby the left boundary of the room.
    else if (x &lt; 0) {
    
        //Make Mario go to the right boundary of the room.
        x += room_width;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_slopeparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slope Collision

//If the object vertical speed is equal/greater than 0.
if (vspeed &gt;= 0) { 
    
    //Bounce
    gravity = 0;
    if (!stun)
        vspeed = 0;
    else
        vspeed = -vspeed/2;
}

//Stay embed on the slope.
if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_solidtop,0,0)) {

    //Move 1 pixel upwards
    while (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom-1,obj_slopeparent,1,0))
        y--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solidtop">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Floor collision

//If there's a platform nearby and Mario's vertical speed is greater than 0.
if ((bbox_bottom &lt; other.yprevious+5) &amp;&amp; (vspeed &gt; 0)) {

    //Snap to position.
    y = other.yprevious-16;
    
    //Bounce
    gravity = 0;
    if (!stun)
        vspeed = 0;
    else
        vspeed = -vspeed/2;    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mario">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario hold or interact with the item.

//Deny if Mario is behind the scenery.
if (obj_mario.depth == 16) {

    if (obj_mario.tile12 &gt; -1) || (obj_mario.tile15 &gt; -1)
        exit;
}

if (stun) {

    //Make Mario kick the item.
    with (obj_mario) event_user(7);
    
    //Force kick event.
    event_user(15);
    
    //Play kick sound.
    if (!audio_is_playing(snd_kick))
        audio_play_sound(snd_kick,0,0);
}
else {

    event_inherited();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get kicked
    
if (stun) {

    //Set the horizontal speed.
    if (obj_mario.x &lt; x) {
    
        xscale = 1;
        hspeed = obj_mario.hspeed+1.5;
    }
    else if (obj_mario.x &gt; x) {
    
        xscale = -1;
        hspeed = obj_mario.hspeed-1.5;
    }
    
    //Move up when solids are not in the way.
    if (collision_rectangle(bbox_left,bbox_top+4,bbox_right,bbox_bottom-4,obj_solid,0,1))
        vspeed = 0;
    else
        vspeed = -2;
}

//Slope bug fix
while (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_slopeparent,1,0))
    y--;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn into a holdable bob-omb.

//Stop it
sprite_index = spr_bobomb_cannon_th;

//Do not animate
image_speed = 0;
image_index = 0;

//Stop horizontal speed
hspeed = 0;

//Make Mario able to kick it
stun = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default wall collision

if (bugfix) {

    event_inherited();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
